<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多图片压缩打包下载</title>
      <link href="/2024/02/20/qian-duan/duo-tu-pian-ya-suo-da-bao-xia-zai/"/>
      <url>/2024/02/20/qian-duan/duo-tu-pian-ya-suo-da-bao-xia-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="批量下载图片，压缩打包"><a href="#批量下载图片，压缩打包" class="headerlink" title="批量下载图片，压缩打包"></a>批量下载图片，压缩打包</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// arr: 图片数组</span><span class="token comment">// title: 压缩包名称</span><span class="token keyword">function</span> <span class="token function">batchDownImg</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"二维码"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSZip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> imgs <span class="token operator">=</span> zip<span class="token punctuation">.</span><span class="token function">folder</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token keyword">var</span> baseList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> name <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 解决跨域 Canvas 污染问题</span>      image<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'crossOrigin'</span><span class="token punctuation">,</span> <span class="token string">'anonymous'</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span>canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> image<span class="token punctuation">.</span>widthcanvas<span class="token punctuation">.</span>height <span class="token operator">=</span> image<span class="token punctuation">.</span>height<span class="token keyword">const</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>width<span class="token punctuation">,</span> image<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 转成base64</span>canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">'image/png'</span><span class="token punctuation">)</span>baseList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span><span class="token literal-property property">img</span><span class="token operator">:</span> url<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>baseList<span class="token punctuation">.</span>length <span class="token operator">===</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>baseList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> baseList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>imgs<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>baseList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'.png'</span><span class="token punctuation">,</span> baseList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>img<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">base64</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>zip<span class="token punctuation">.</span><span class="token function">generateAsync</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'blob'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>FileSaver<span class="token punctuation">.</span><span class="token function">saveAs</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> blogTitle <span class="token operator">+</span> <span class="token string">'.zip'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'暂无图片可下载'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React中的hooks</title>
      <link href="/2024/02/19/react/react-zhong-de-hooks/"/>
      <url>/2024/02/19/react/react-zhong-de-hooks/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>React-Hooks 是 React 团队在组件开发实践中，逐渐认知到的一个改进点，这背后其实涉及对<strong>类组件</strong>和<strong>函数组件</strong>两种组件形式的思考和侧重</p><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><p>基于 ES6 class 写法，继承 React.Component 得到的组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 数据初始化</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>change <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mount'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>change<span class="token punctuation">&#125;</span><span class="token operator">></span>click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，类组件中内置了很多现成的东西，比如生命周期，我们按照提供的规则去写就能够得到一个可以使用的组件</p><p>但React.Component提供的东西太过繁杂，往往难以理解，并且书写的代码逻辑是分散在各个地方，不利于拆分和复用。并且组件常常在 componentDidMount 和 componentDidUpdate 中获取数据，但是，同一个 componentDidMount 中可能也包含很多其它的逻辑，如设置事件监听，而之后需在 componentWillUnmount 中清除。</p><p>相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。</p><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><p>就是以函数形态存在的组件，因为一开始并没有 hook，所以函数组件无法定义和维护state，被称为无状态组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"wrapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token keyword">get</span> some value<span class="token operator">:</span> <span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 hook 出现之前，类组件要明显强于函数组件，函数组件最大的问题是无法维护内部状态</p><p>react hooks 的出现，可以让我们在不编写 class 的情况下使用 state 以及其他的 React 特性，补齐函数相对于类组件而言缺失的功能。</p><p>没有太多书写的限制，不强制按照生命周期划分逻辑，不需要理解 this，将复杂组件中相互关联的部分拆分成更小的函数达到复用的目的。</p><h3 id="关于Vue"><a href="#关于Vue" class="headerlink" title="关于Vue"></a>关于Vue</h3><p>类组件和函数组件之间，是面向对象和函数式编程这两套不同的设计思想之间的差异，react 16.8 新增 hook 大力推进 函数组件的使用，vue3 新增 composition API 取代 options API 的写法，options API 实际上还是面向对象的思路，composition API 也叫 组合API</p><ul><li>options API 对比 react 类组件：</li></ul><p>1、组件数据：vue data 类似于 this.state，数据必须在这里统一初始化</p><p>2、功能方法：vue 则限制在 methods里，react 将所有方法分散在 class 里</p><p>3、生命周期：vue 和 react 都是通过特定的方法名调用</p><ul><li>vue options API 与 react 类组件遇到的问题很相似：</li></ul><p>1、逻辑不好拆分达到复用，和组件强关联</p><p>2、不相关的代码组合在一起，相关的代码反而聚合在一起</p><p>3、需要注意 this指向</p><ul><li>为了解决部分问题，vue 和 react 都有一些解决方法：</li></ul><p>vue：引入 mixin extends 等但毫无疑问增加了使用和维护成本还带来了数据流向不清晰的问题</p><p>react：引入 providers，consumers，高阶组件，render props 等其他抽象层组成的组件最终形成了“嵌套地狱”，同时也存在数据流向的问题</p><p>但这说明了一个更深层次的问题：Vue 和 React 都需要为共享状态逻辑提供更好的原生途径。</p><p>结果是：</p><p>1、vue3 引入 Composition API 与 <code>&lt;script setup&gt;</code></p><p>2、react16.8 引入 hook</p><p>关于 Composition API：实质就是抛弃了 options 的写法，不再是一个对象，而是将一些逻辑组合在一起，其实就是函数组件</p><p>关于 <code>&lt;script setup&gt;</code>：vue3 兼容 options API 的写法，并提供了 setup 属性，可以把组合在一起的逻辑写在这里，但如果把 setup 作为 script 标签的属性就可以完全抛弃 options API</p><p>从类组件和 options API 从一开始引入到出现种种问题，再到逐步引入了一些新的更为复杂的概念，再到官方推旧出新引入新的设计中可以看到，在组件设计上，尤其是业务组件逐渐复杂的情况下，函数式编程要完胜与面向对象的写法。</p><h2 id="hooks一览"><a href="#hooks一览" class="headerlink" title="hooks一览"></a>hooks一览</h2><p>hook 大致分为几种：</p><p>1、组件状态处理相关： useState、useReducer、useContext</p><p>2、处理副作用：useEffect、useLayoutEffect</p><p>3、性能优化相关：useMemo、useCallback</p><p>4、DOM 相关：useRef</p><p>5、redux 相关：useSelector、useDispatch、useStore</p><p>6、用户自定义 hook 或者是 某些库自带的 hook等</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>在函数组件保存数据的主要方法，等同于类组件的 this.state 与 this.setState</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token literal-property property">当前count</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token string">"&#123;change&#125;"</span><span class="token operator">></span>点击<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>useState接受初始值，返回一个state，以及更新state的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">// data = getData() // 可以进行一些计算</span><span class="token keyword">return</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始值可以是一个函数</p><p>**注意：useState返回的是一个数组</p><blockquote><p>?? 为什么是数组，不是对象<br>返回对象需要考虑对象属性名的问题<br>const { state, setState } &#x3D; React.useState({})<br>const { state: count, setState: setCount } &#x3D; React.useState(0)<br>如果使用了多次 setState，就要进行重命名，是非常麻烦的！！</p></blockquote><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>类组件中通常在生命周期中执行副作用，useEffect的作用是补充函数组件无法正确执行副作用的问题</p><blockquote><p>你之前可能已经在 React 组件中执行过数据获取、订阅或者手动修改过 DOM。我们统一把这些操作称为“副作用”，或者简称为“作用”。</p></blockquote><p>获取数据的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:5504/react-test/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> txt <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">setText</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>change<span class="token punctuation">&#125;</span><span class="token operator">></span>click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口获取文件内容并setText ，并在页面渲染出来，看起来没什么问题，但是当点击按钮的时候请求了两次 html，因为每次数据由变化，都会重新执行 Test</p><p>此时我们需要 useEffect</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> setText<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:5504/react-test/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> txt <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">setText</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>change<span class="token punctuation">&#125;</span><span class="token operator">></span>click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>useEffect接受两个参数：</p><p>参数一：被监听的参数发生变化时执行的回调函数<br>参数二：被监听的参数</p><p>参数二为空，表示不依赖任何数据，只在初次渲染后触发</p><p>当监听参数发生变化时就会执行回调，这里空数组只会在初次渲染时执行，等同于 componentDIdMount</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package.json中依赖版本说明</title>
      <link href="/2023/12/18/qian-duan/xiang-mu-zhong-package-json-zhong-yi-lai-ban-ben-shuo-ming/"/>
      <url>/2023/12/18/qian-duan/xiang-mu-zhong-package-json-zhong-yi-lai-ban-ben-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h2 id="package-json文件示例"><a href="#package-json文件示例" class="headerlink" title="package.json文件示例"></a>package.json文件示例</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"chrome-extension"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service serve"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service build"</span><span class="token punctuation">,</span>    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service lint"</span><span class="token punctuation">,</span>    <span class="token property">"build-watch"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service  --env.NODE_ENV=development build-watch --mode development"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"axios"</span><span class="token operator">:</span> <span class="token string">"^1.6.2"</span><span class="token punctuation">,</span>    <span class="token property">"core-js"</span><span class="token operator">:</span> <span class="token string">"^3.8.3"</span><span class="token punctuation">,</span>    <span class="token property">"element-ui"</span><span class="token operator">:</span> <span class="token string">"^2.15.14"</span><span class="token punctuation">,</span>    <span class="token property">"jquery"</span><span class="token operator">:</span> <span class="token string">"^3.7.1"</span><span class="token punctuation">,</span>    <span class="token property">"js-md5"</span><span class="token operator">:</span> <span class="token string">"^0.8.3"</span><span class="token punctuation">,</span>    <span class="token property">"qs"</span><span class="token operator">:</span> <span class="token string">"^6.7.0"</span><span class="token punctuation">,</span>    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^2.6.14"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.12.16"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/eslint-parser"</span><span class="token operator">:</span> <span class="token string">"^7.12.16"</span><span class="token punctuation">,</span>    <span class="token property">"@vue/cli-plugin-babel"</span><span class="token operator">:</span> <span class="token string">"~5.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"@vue/cli-plugin-eslint"</span><span class="token operator">:</span> <span class="token string">"~5.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"@vue/cli-service"</span><span class="token operator">:</span> <span class="token string">"~5.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"^7.32.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-plugin-vue"</span><span class="token operator">:</span> <span class="token string">"^8.0.3"</span><span class="token punctuation">,</span>    <span class="token property">"vue-cli-plugin-chrome-extension-cli"</span><span class="token operator">:</span> <span class="token string">"~1.1.4"</span><span class="token punctuation">,</span>    <span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.6.14"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"eslintConfig"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"root"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"webextensions"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span>      <span class="token string">"eslint:recommended"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"@babel/eslint-parser"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"> 1%"</span><span class="token punctuation">,</span>    <span class="token string">"last 2 versions"</span><span class="token punctuation">,</span>    <span class="token string">"not dead"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"chrome-extension@0.1.0"</span><span class="token punctuation">,</span>  <span class="token property">"readme"</span><span class="token operator">:</span> <span class="token string">"ERROR: No README data found!"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="package-json各字段说明"><a href="#package-json各字段说明" class="headerlink" title="package.json各字段说明"></a>package.json各字段说明</h2><ol><li><code>name</code>名称</li><li><code>version</code>版本</li><li><code>scripts</code>执行脚本</li><li><code>dependencies</code>生产环境依赖</li><li><code>devDependencies</code>开发环境依赖</li><li><code>eslintConfig</code> eslint配置</li><li><code>browserslist</code>浏览器支持情况</li></ol><h2 id="依赖版本符号说明"><a href="#依赖版本符号说明" class="headerlink" title="依赖版本符号说明"></a>依赖版本符号说明</h2><ol><li><p><code>^</code><br><code>&quot;@babel/core&quot;: &quot;^7.12.16&quot;</code>表示只更新到次版本号，只会从7.12.16更新到7.x.x，不会更新到8.x.x</p></li><li><p><code>~</code><br><code>&quot;@vue/cli-plugin-babel&quot;: &quot;~5.0.0&quot;,</code>表示只更新到补丁版本，只会由5.0.0更新到5.0.x，不会更新到5.1以及6.x</p></li><li><p>无符号<br><code>&quot;qs&quot;: &quot;6.7.0&quot;</code>表示依赖版本不会更新</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>插件开发过程中遇到的问题</title>
      <link href="/2023/12/15/qian-duan/cha-jian-kai-fa-guo-cheng-zhong-yu-dao-de-wen-ti/"/>
      <url>/2023/12/15/qian-duan/cha-jian-kai-fa-guo-cheng-zhong-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一、content-script-中onMessage内部执行异步操作之后sendResponse结果报错"><a href="#一、content-script-中onMessage内部执行异步操作之后sendResponse结果报错" class="headerlink" title="一、content_script 中onMessage内部执行异步操作之后sendResponse结果报错"></a>一、content_script 中onMessage内部执行异步操作之后sendResponse结果报错</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// popup.js</span><span class="token comment">// 发送消息</span>chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">action</span><span class="token operator">:</span> <span class="token string">'send'</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'给content发信息，希望能出来一起玩'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>msg<span class="token punctuation">)</span> <span class="token comment">//</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// content.js</span><span class="token comment">// 第一个监听器，直接返回true，保持消息端口开启</span><span class="token comment">// onMessage0</span>chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>onMessage<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> sendResponse</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 监听—— onMessage1</span>chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>onMessage<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> sendResponse</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">'send'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 接收到消息</span><span class="token comment">// 不能立即回复，需要询问家长是否能出去玩</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'xx'</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">// 成功回调,允许出门</span><span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token string">'我这就出门找popup玩'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">// 失败，不能出门</span><span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token string">'但是我不能出去'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// sendResponse()发送失败，当popup发出消息被content接收以后，消息端口会立即关闭，所以执行完axios再进行sendResponse的话，此时的连接已经被断开，自然发送不成功</span><span class="token comment">// *** 解决方案：*****</span><span class="token comment">// 1、在异步操作之后添加 return true</span><span class="token comment">// 2、在真实的onMessage监听之前先添加一个空的onMessage，直接return true以保持消息端口开启，如上方onMessage0</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome浏览器插件开发</title>
      <link href="/2023/12/05/qian-duan/chrome-cha-jian-kai-fa/"/>
      <url>/2023/12/05/qian-duan/chrome-cha-jian-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="chrome插件几大要素"><a href="#chrome插件几大要素" class="headerlink" title="chrome插件几大要素"></a>chrome插件几大要素</h2><ol><li>manifest.json<br><code>Manifest</code>文件是一个插件的元数据，它告诉Chrome插件的名称、描述、版本、权限以及其他插件需要的属性。下面是一个基本的Manifest.json文件:</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"manifest_version"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"My First Extension"</span><span class="token punctuation">,</span> <span class="token comment">// 插件名称</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"This is a sample Chrome Extension"</span><span class="token punctuation">,</span> <span class="token comment">// 描述</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> <span class="token comment">// 插件版本</span>  <span class="token property">"icons"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"48"</span><span class="token operator">:</span> <span class="token string">"icon.png"</span><span class="token punctuation">,</span>    <span class="token property">"128"</span><span class="token operator">:</span> <span class="token string">"icon_large.png"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"permissions"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 权限</span>    <span class="token string">"activeTab"</span><span class="token punctuation">,</span>    <span class="token string">"storage"</span><span class="token punctuation">,</span>    <span class="token string">"https://*.mywebsite.com/*"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"background"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"background.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"persistent"</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"content_scripts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"matches"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://*.google.com/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"js"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"content.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"run_at"</span><span class="token operator">:</span> <span class="token string">"document_end"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"browser_action"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"default_icon"</span><span class="token operator">:</span> <span class="token string">"icon.png"</span><span class="token punctuation">,</span>    <span class="token property">"default_popup"</span><span class="token operator">:</span> <span class="token string">"popup.html"</span><span class="token punctuation">,</span>    <span class="token property">"default_title"</span><span class="token operator">:</span> <span class="token string">"Open the popup"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"options_page"</span><span class="token operator">:</span> <span class="token string">"options.html"</span><span class="token punctuation">,</span>  <span class="token property">"web_accessible_resources"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"script.js"</span><span class="token punctuation">,</span>    <span class="token string">"style.css"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>背景脚本（Background Scripts）</li></ol><p>背景脚本是插件的主要工作区域，它可以监听浏览器事件，执行长时间运行的任务，或者管理插件的其他部分。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// background.js</span>chrome<span class="token punctuation">.</span>browserAction<span class="token punctuation">.</span>onClicked<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tab</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 监听浏览器动作-click事件</span>  chrome<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span><span class="token function">executeScript</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token string">'document.body.style.backgroundColor="green"'</span> <span class="token comment">// 当前标签页执行一个简单的脚本，将页面背景设为绿色</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>内容脚本（Content Scripts）</li></ol><p>内容脚本是插入到网页中的脚本，它们可以直接访问和修改网页的DOM。下面是一个内容脚本的例子，它在页面加载完成后，将所有的链接变为红色：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// content.js</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> links <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> links<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    links<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>弹出页面(Popup Pages)</li></ol><p>弹出页面是插件的用户界面，它们在用户点击插件图标时显示。下面是一个弹出页面的HTML代码，它显示一个简单的欢迎消息：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- popup.html --></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome to My Extension!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>选项页面(Options Pages)</li></ol><p>选项页面是插件的设置页面，用户可以通过它来自定义插件的行为。下面是一个选项页面的例子：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- options.html --></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Extension Options<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Background color: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bgColor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Save<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>options.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的选项页面中，用户可以输入一个颜色，然后点击保存按钮来改变插件的背景颜色。这需要配合一个options.js脚本来实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'save'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> color <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'bgColor'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>  chrome<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>sync <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> color<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="manifest-json配置项"><a href="#manifest-json配置项" class="headerlink" title="manifest.json配置项"></a>manifest.json配置项</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token comment">// 清单文件的版本，这个必须写，而且必须是2</span><span class="token property">"manifest_version"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">// 插件的名称"</span>name<span class="token string">": "</span>demo"<span class="token punctuation">,</span><span class="token comment">// 插件的版本</span><span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span><span class="token comment">// 插件描述</span><span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"简单的Chrome扩展demo"</span><span class="token punctuation">,</span><span class="token comment">// 图标，一般偷懒全部用一个尺寸的也没问题"</span>icons"<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"16"</span><span class="token operator">:</span> <span class="token string">"img/icon.png"</span><span class="token punctuation">,</span><span class="token property">"48"</span><span class="token operator">:</span> <span class="token string">"img/icon.png"</span><span class="token punctuation">,</span><span class="token property">"128"</span><span class="token operator">:</span> <span class="token string">"img/icon.png"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 会一直常驻的后台JS或后台页面</span><span class="token property">"background"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">// 2种指定方式，如果指定JS，那么会自动生成一个背景页</span><span class="token property">"page"</span><span class="token operator">:</span> <span class="token string">"background.html"</span><span class="token comment">//</span><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"js/background.js"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 浏览器右上角图标设置，browser_action、page_action、app必须三选一</span><span class="token property">"browser_action"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"default_icon"</span><span class="token operator">:</span> <span class="token string">"img/icon.png"</span><span class="token punctuation">,</span><span class="token comment">// 图标悬停时的标题，可选</span><span class="token property">"default_title"</span><span class="token operator">:</span> <span class="token string">"这是一个示例Chrome插件"</span><span class="token punctuation">,</span><span class="token property">"default_popup"</span><span class="token operator">:</span> <span class="token string">"popup.html"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 当某些特定页面打开才显示的图标/*</span><span class="token property">"page_action"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"default_icon"</span><span class="token operator">:</span> <span class="token string">"img/icon.png"</span><span class="token punctuation">,</span><span class="token property">"default_title"</span><span class="token operator">:</span> <span class="token string">"我是pageAction"</span><span class="token punctuation">,</span><span class="token property">"default_popup"</span><span class="token operator">:</span> <span class="token string">"popup.html"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>*/<span class="token comment">// 需要直接注入页面的JS</span><span class="token property">"content_scripts"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token comment">//</span><span class="token property">"matches"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"http:"</span><span class="token punctuation">,</span> <span class="token string">"https:"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// "&lt;all_urls>" 表示匹配所有地址</span><span class="token property">"matches"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;all_urls>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 多个JS按顺序注入</span><span class="token property">"js"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"js/jquery-1.8.3.js"</span><span class="token punctuation">,</span> <span class="token string">"js/content-script.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式</span><span class="token property">"css"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"css/custom.css"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 代码注入的时间，可选值： "document_start", "document_end", or "document_idle"，最后一个表示页面空闲时，默认document_idle</span><span class="token property">"run_at"</span><span class="token operator">:</span> <span class="token string">"document_start"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 这里仅仅是为了演示content-script可以配置多个规则</span><span class="token punctuation">&#123;</span><span class="token property">"matches"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*:"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"*:gif"</span><span class="token punctuation">,</span> <span class="token string">"*:/.bmp"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"js"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"js/show-image-content-size.js"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 权限申请</span><span class="token property">"permissions"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"contextMenus"</span><span class="token punctuation">,</span> <span class="token comment">// 右键菜单</span><span class="token string">"tabs"</span><span class="token punctuation">,</span> <span class="token comment">// 标签</span><span class="token string">"notifications"</span><span class="token punctuation">,</span> <span class="token comment">// 通知</span><span class="token string">"webRequest"</span><span class="token punctuation">,</span> <span class="token comment">// web请求</span><span class="token string">"webRequestBlocking"</span><span class="token punctuation">,</span><span class="token string">"storage"</span><span class="token punctuation">,</span> <span class="token comment">// 插件本地存储</span><span class="token string">"http:*"</span><span class="token punctuation">,</span> <span class="token comment">// 可以通过executeScript或者insertCSS访问的网站"</span>https<span class="token operator">:</span>/" <span class="token comment">// 可以通过executeScript或者insertCSS访问的网站</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的</span><span class="token property">"web_accessible_resources"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"js/inject.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 插件主页，这个很重要，不要浪费了这个免费广告位</span><span class="token property">"homepage_url"</span><span class="token operator">:</span> <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span><span class="token comment">// 覆盖浏览器默认页面</span><span class="token property">"chrome_url_overrides"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token comment">// 覆盖浏览器默认的新标签页</span><span class="token property">"newtab"</span><span class="token operator">:</span> <span class="token string">"newtab.html"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// Chrome40以前的插件配置页写法</span><span class="token property">"options_page"</span><span class="token operator">:</span> <span class="token string">"options.html"</span><span class="token punctuation">,</span><span class="token comment">// Chrome40以后的插件配置页写法，如果2个都写，新版Chrome只认后面这一个</span><span class="token property">"options_ui"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"page"</span><span class="token operator">:</span> <span class="token string">"options.html"</span><span class="token punctuation">,</span><span class="token comment">// 添加一些默认的样式，推荐使用</span><span class="token property">"chrome_style"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字</span><span class="token property">"omnibox"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token string">"go"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 默认语言</span><span class="token property">"default_locale"</span><span class="token operator">:</span> <span class="token string">"zh_CN"</span><span class="token punctuation">,</span><span class="token comment">// devtools页面入口，注意只能指向一个HTML文件，不能是JS文件</span><span class="token property">"devtools_page"</span><span class="token operator">:</span> <span class="token string">"devtools.html"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插件生命周期与事件系统"><a href="#插件生命周期与事件系统" class="headerlink" title="插件生命周期与事件系统"></a>插件生命周期与事件系统</h2><p>插件的生命周期是指从用户安装或更新插件，到用户卸载插件的过程。在这个过程中，插件可以响应各种浏览器或用户事件，执行相应的操作</p><h3 id="插件生命周期"><a href="#插件生命周期" class="headerlink" title="插件生命周期"></a>插件生命周期</h3><p>插件的生命周期主要包含以下阶段：</p><ol><li>安装或更新：用户第一次安装插件，或者插件有新的版本可供更新时，浏览器会加载并初始化插件。此时，插件可以在background脚本中监听<code>chrome.runtime.onInstalled</code>事件，执行初始化操作。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>onInstalled<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">details</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>details<span class="token punctuation">.</span>reason <span class="token operator">==</span> <span class="token string">"install"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"This is a first install!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>details<span class="token punctuation">.</span>reason <span class="token operator">==</span> <span class="token string">"update"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Updated from "</span> <span class="token operator">+</span> details<span class="token punctuation">.</span>previousVersion <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">getManifest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>启动：用户打开浏览器时，插件会被启动。插件可以在这个阶段初始化数据，设置默认状态等。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>onStartup<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Browser started, initialize plugin data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>运行：插件被启动后，就进入了运行阶段。在这个阶段，插件可以响应用户操作，监听和处理浏览器事件，提供各种功能。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">chrome<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span>onUpdated<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tabId<span class="token punctuation">,</span> changeInfo<span class="token punctuation">,</span> tab</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>changeInfo<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'complete'</span> <span class="token operator">&amp;&amp;</span> tab<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Active tab updated, let's do something!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>停止：用户关闭浏览器时，插件会被停止。插件可以监听chrome.runtime.onSuspend事件，保存数据，清理资源等。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>onSuspend<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Browser is about to close, save plugin data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>卸载：用户从浏览器中卸载插件时，插件的生命周期就结束了。插件可以监听chrome.runtime.onInstalled事件的uninstall原因，执行卸载操作。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">setUninstallURL</span><span class="token punctuation">(</span><span class="token string">"https://your_website.com/uninstall"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Uninstall URL has been set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="插件各脚本之间的关系"><a href="#插件各脚本之间的关系" class="headerlink" title="插件各脚本之间的关系"></a>插件各脚本之间的关系</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/11/2/16e29d0dea8191b9~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="关系"></p><h2 id="插件各脚本权限"><a href="#插件各脚本权限" class="headerlink" title="插件各脚本权限"></a>插件各脚本权限</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/11/2/16e29ccb69463a4d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="权限"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用方法</title>
      <link href="/2023/12/05/ji-lu/chang-yong-fang-fa/"/>
      <url>/2023/12/05/ji-lu/chang-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="获取当前页面地址栏拼接参数"><a href="#获取当前页面地址栏拼接参数" class="headerlink" title="获取当前页面地址栏拼接参数"></a>获取当前页面地址栏拼接参数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getUrlName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// name：参数名</span><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(\\?|#|&amp;)'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'=([^&amp;#]*)(&amp;|#|$)'</span><span class="token punctuation">)</span> <span class="token comment">// 通过正则匹配地址栏参数</span><span class="token keyword">var</span> m <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token operator">!</span>m <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 对获取到的参数进行解码（一些特殊字符，中文，@，等传递时会进行encodeURLComponent编码）</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用方式</span><span class="token comment">// 例如：url = 'http://www.baidu.com?id=1&amp;name=张三'</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">getUrlName</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span> <span class="token comment">// 1</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">getUrlName</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token comment">// 张三</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用网址</title>
      <link href="/2023/11/24/ji-lu/chang-yong-wang-zhi/"/>
      <url>/2023/11/24/ji-lu/chang-yong-wang-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-壁纸"><a href="#1-壁纸" class="headerlink" title="1. 壁纸"></a>1. 壁纸</h2><ul><li><a href="https://bz.zzzmh.cn/index">https://bz.zzzmh.cn/index</a></li><li><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></li></ul><h2 id="2-电子书"><a href="#2-电子书" class="headerlink" title="2. 电子书"></a>2. 电子书</h2><ul><li><a href="https://sobooks.net/#google_vignette">https://sobooks.net/#google_vignette</a></li><li><a href="https://www.jiumodiary.com/">https://www.jiumodiary.com</a></li><li><a href="https://www.nmod.net/#google_vignette">https://www.nmod.net/#google_vignette</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序自定义camera截取取景框内容</title>
      <link href="/2023/11/24/qian-duan/wei-xin-xiao-cheng-xu-zi-ding-yi-camera-jie-qu-qu-jing-kuang-nei-rong/"/>
      <url>/2023/11/24/qian-duan/wei-xin-xiao-cheng-xu-zi-ding-yi-camera-jie-qu-qu-jing-kuang-nei-rong/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>最近在写需求的时候遇到上传身份证的功能，要求小程序内调起相机显示取景框，并且最终只获取取景框里的内容<br><img src="https://gitee.com/syy1101/image/raw/master/20231124-1.jpg" alt="问题描述"></p><p>参考：<a href="https://blog.csdn.net/zhazhashuai1999/article/details/120201389">https://blog.csdn.net/zhazhashuai1999/article/details/120201389</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>小程序<code>wx.chooseImage</code>默认是没有取景框的限制的，又不支持自定义样式，所以需要自定义<code>camera</code>组件</li><li><code>camera</code>可以自定义样式，但是默认拍摄的内容是全屏的，所以单独使用<code>camera</code>也是不行</li><li>如果<code>camera</code>跟<code>canvas</code>一起使用呢？<code>camera</code>负责拍摄，<code>canvas</code>负责截取指定区域生成图片</li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h4 id="1、使用camera获取相机"><a href="#1、使用camera获取相机" class="headerlink" title="1、使用camera获取相机"></a>1、使用camera获取相机</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>camera</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>camera<span class="token punctuation">'</span></span> <span class="token attr-name">device-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;&#123; position &#125;&#125;<span class="token punctuation">'</span></span> <span class="token attr-name">binderror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>error<span class="token punctuation">'</span></span> <span class="token attr-name">bindstop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>cancel<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>camera</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 取景框 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cover-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cover-view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cover-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>btnBox<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cover-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>cancel<span class="token punctuation">'</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>cancel<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cover-view</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cover-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>take<span class="token punctuation">'</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>takePhoto<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cover-view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>round<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cover-view</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cover-view</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cover-image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>https://hbrand.oss-cn-hangzhou.aliyuncs.com/hzhuihe/lens.png<span class="token punctuation">'</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>transLens<span class="token punctuation">'</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>lens<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cover-image</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cover-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- canvas透明度设为0 !!!--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>canvas-box>        &lt;canvas type=<span class="token punctuation">"</span></span><span class="token attr-name">2d"</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、点击“拍照”，调用takePhoto拍摄照片并获取临时路径"><a href="#2、点击“拍照”，调用takePhoto拍摄照片并获取临时路径" class="headerlink" title="2、点击“拍照”，调用takePhoto拍摄照片并获取临时路径"></a>2、点击“拍照”，调用<code>takePhoto</code>拍摄照片并获取临时路径</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">takePhoto</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> ctx <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCameraContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span><span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">quality</span><span class="token operator">:</span> <span class="token string">'high'</span><span class="token punctuation">,</span>            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">iPath</span><span class="token operator">:</span> res<span class="token punctuation">.</span>tempImagePath                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、获取canvas实例-传给自定义函数init"><a href="#3、获取canvas实例-传给自定义函数init" class="headerlink" title="3、获取canvas实例,传给自定义函数init()"></a>3、获取canvas实例,传给自定义函数init()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> ctx <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">createCameraContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">takePhoto</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">quality</span><span class="token operator">:</span> <span class="token string">'high'</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>tempImagePath<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">iPath</span><span class="token operator">:</span> res<span class="token punctuation">.</span>tempImagePath        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        wx<span class="token punctuation">.</span><span class="token function">createSelectorQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'#mycanvas'</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> canvas <span class="token operator">=</span> res<span class="token punctuation">.</span>node            <span class="token keyword">const</span> ctx2 <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>ctx2<span class="token punctuation">,</span> canvas<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、使用Canvas-createImage-函数创建一个image对象-然后给image对象-src-赋值-在img-onload回调中继续下一步"><a href="#4、使用Canvas-createImage-函数创建一个image对象-然后给image对象-src-赋值-在img-onload回调中继续下一步" class="headerlink" title="4、使用Canvas.createImage()函数创建一个image对象,然后给image对象(src)赋值,在img.onload回调中继续下一步"></a>4、使用Canvas.createImage()函数创建一个image对象,然后给image对象(src)赋值,在img.onload回调中继续下一步</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> img <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'临时路径'</span>img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">// to do something</span><span class="token punctuation">&#125;</span>img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、获取刚刚拍的照片的尺寸-img-width-x2F-img-height-然后根据取景框相对于camera组件的位置和大小计算出图片对应部分的截取的定位和尺寸-比如我的取景框的position是top-36-5-就是c-y-x3D-img-height-0-365"><a href="#5、获取刚刚拍的照片的尺寸-img-width-x2F-img-height-然后根据取景框相对于camera组件的位置和大小计算出图片对应部分的截取的定位和尺寸-比如我的取景框的position是top-36-5-就是c-y-x3D-img-height-0-365" class="headerlink" title="5、获取刚刚拍的照片的尺寸(img.width&#x2F;img.height),然后根据取景框相对于camera组件的位置和大小计算出图片对应部分的截取的定位和尺寸.比如我的取景框的position是top:36.5%,就是c_y &#x3D; img.height*0.365"></a>5、获取刚刚拍的照片的尺寸(img.width&#x2F;img.height),然后根据取景框相对于camera组件的位置和大小计算出图片对应部分的截取的定位和尺寸.比如我的取景框的position是top:36.5%,就是c_y &#x3D; img.height*0.365</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">width_t</span><span class="token operator">:</span> img<span class="token punctuation">.</span>width<span class="token punctuation">,</span><span class="token literal-property property">height_t</span><span class="token operator">:</span> img<span class="token punctuation">.</span>height<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> c_x <span class="token operator">=</span> img<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.05</span><span class="token keyword">let</span> c_w <span class="token operator">=</span> img<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.89</span><span class="token keyword">let</span> c_y <span class="token operator">=</span> img<span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">0.365</span><span class="token keyword">let</span> c_h <span class="token operator">=</span> img<span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">0.12</span><span class="token comment">// 截取图片指定部分并绘制到canvas</span>ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> c_x<span class="token punctuation">,</span> c_y<span class="token punctuation">,</span> c_w<span class="token punctuation">,</span> c_h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c_h <span class="token operator">/</span> c_w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// width固定300，按比例计算出height</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、前面步骤都完成了基本没有大问题了-接下来就是绘制canvas然后保存为图片-存到本地"><a href="#6、前面步骤都完成了基本没有大问题了-接下来就是绘制canvas然后保存为图片-存到本地" class="headerlink" title="6、前面步骤都完成了基本没有大问题了,接下来就是绘制canvas然后保存为图片,存到本地"></a>6、前面步骤都完成了基本没有大问题了,接下来就是绘制canvas然后保存为图片,存到本地</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> canvas</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> img <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>iPath  img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">width_t</span><span class="token operator">:</span> img<span class="token punctuation">.</span>width<span class="token punctuation">,</span>      <span class="token literal-property property">height_t</span><span class="token operator">:</span> img<span class="token punctuation">.</span>height    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> c_x <span class="token operator">=</span> img<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.05</span>    <span class="token keyword">let</span> c_w <span class="token operator">=</span> img<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.89</span>    <span class="token keyword">let</span> c_y <span class="token operator">=</span> img<span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">0.365</span>    <span class="token keyword">let</span> c_h <span class="token operator">=</span> img<span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">0.12</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c_x<span class="token punctuation">,</span> c_y<span class="token punctuation">,</span> c_w<span class="token punctuation">,</span> c_h<span class="token punctuation">)</span>    <span class="token comment">//截取图片指定部分并绘制到canvas</span>    ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> c_x<span class="token punctuation">,</span> c_y<span class="token punctuation">,</span> c_w<span class="token punctuation">,</span> c_h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c_h <span class="token operator">/</span> c_w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//width固定为300,按比例计算出height</span>    <span class="token comment">//将canvas内容保存为图片</span>    wx<span class="token punctuation">.</span><span class="token function">canvasToTempFilePath</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">canvas</span><span class="token operator">:</span> canvas<span class="token punctuation">,</span>      <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>      <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">300</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c_h <span class="token operator">/</span> c_w<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token literal-property property">fileType</span><span class="token operator">:</span> <span class="token string">'png'</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        wx<span class="token punctuation">.</span><span class="token function">saveImageToPhotosAlbum</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">//将图片保存到本地相册</span>          <span class="token literal-property property">filePath</span><span class="token operator">:</span> res<span class="token punctuation">.</span>tempFilePath<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> imgPath <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>tempFilePath<span class="token punctuation">)</span>        <span class="token comment">//上传到接口</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">uploadimg</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'err:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启算法之旅——Hello World</title>
      <link href="/2023/11/07/suan-fa/kai-qi-suan-fa-zhi-lu/"/>
      <url>/2023/11/07/suan-fa/kai-qi-suan-fa-zhi-lu/</url>
      
        <content type="html"><![CDATA[<mark class="hl-label blue">时间复杂度</mark>  <mark class="hl-label pink">空间复杂度</mark>  <mark class="hl-label red">递归</mark>  <mark class="hl-label purple">链表</mark>  <mark class="hl-label green">堆</mark>  <mark class="hl-label orange">栈</mark> ]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>openWrite-博文一键发送各平台</title>
      <link href="/2023/11/06/ji-lu/bo-wen-yi-jian-fa-song-ge-ping-tai-gong-ju/"/>
      <url>/2023/11/06/ji-lu/bo-wen-yi-jian-fa-song-ge-ping-tai-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>地址：<a href="http://admin.openwrite.cn/#/diffusion/home">http://admin.openwrite.cn/#/diffusion/home</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>封装axios处理错误信息弹窗多次弹出问题</title>
      <link href="/2023/11/06/qian-duan/feng-zhuang-axios-chu-li-cuo-wu-qing-qiu-duo-ci-dan-chuang-wen-ti/"/>
      <url>/2023/11/06/qian-duan/feng-zhuang-axios-chu-li-cuo-wu-qing-qiu-duo-ci-dan-chuang-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>前端处理请求时，一般会封装请求方法，对返回内容以及错误信息进行统一管理，但是当同时请求多个信息且发生报错时，平常的方式会对每一个请求接口进行窗口提示，就会同时弹出多个弹窗，用户体验及其不好</p><p><img src="https://gitee.com/syy1101/image/raw/master/20231106.png" alt="多个弹窗"></p><h1 id="处理方案"><a href="#处理方案" class="headerlink" title="处理方案"></a>处理方案</h1><blockquote><p>个人使用的是elementUI，故本文针对elementUI进行处理</p></blockquote><p><strong>方案：重写message弹窗</strong></p><h3 id="第一步，重写message"><a href="#第一步，重写message" class="headerlink" title="第一步，重写message"></a>第一步，重写message</h3><p>创建resetMessage.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**重置message，防止同时多个重复弹出message弹框 */</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Message <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">let</span> messageInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">const</span> <span class="token function-variable function">resetMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>messageInstance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        messageInstance<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    messageInstance <span class="token operator">=</span> <span class="token function">Message</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'info'</span><span class="token punctuation">,</span> <span class="token string">'warning'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">type</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    resetMessage<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token parameter">options</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> options            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        options<span class="token punctuation">.</span>type <span class="token operator">=</span> type        <span class="token keyword">return</span> <span class="token function">resetMessage</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> messageup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">export</span> <span class="token keyword">default</span> messageup <span class="token operator">=</span> resetMessage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二步：在main-js中引入"><a href="#第二步：在main-js中引入" class="headerlink" title="第二步：在main.js中引入"></a>第二步：在main.js中引入</h3><blockquote><p>注意：重写message提示框  一定要放在Vue.use(ElementUI)之后</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Message <span class="token keyword">from</span> <span class="token string">'./assets/js/resetMessage'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$message <span class="token operator">=</span> Message<span class="token punctuation">;</span> <span class="token comment">// 重写message提示框  一定要放在Vue.use(ElementUI)之后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>在vue组件中调用</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'提示内容'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方式一</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span>success<span class="token punctuation">,</span><span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">'提示内容'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方式二</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>在js文件中调用</li></ol><p>需要先引入resetMessage.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Message <span class="token keyword">from</span> <span class="token string">'@/utils/resetMessage'</span><span class="token punctuation">;</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span><span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'提示内容'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式一</span>Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'提示内容'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方式二</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>色值记录</title>
      <link href="/2023/10/31/ji-lu/se-zhi/"/>
      <url>/2023/10/31/ji-lu/se-zhi/</url>
      
        <content type="html"><![CDATA[<div style="display: flex; flex-wrap: wrap; text-align: center;">    <div style="width: 100px; height:30px; margin-right: 10px; margin-bottom: 5px; line-height: 30px; border-radius: 5px; background: #c0e0e0;">#c0e0e0</div>    <div style="width: 100px; height:30px; margin-right: 10px; margin-bottom: 5px; line-height: 30px; border-radius: 5px; background: #a5d4e7;">#a5d4e7</div>    <div style="width: 100px; height:30px; margin-right: 10px; margin-bottom: 5px; line-height: 30px; border-radius: 5px; background: #a5b6e7;">#a5b6e7</div>    <div style="width: 100px; height:30px; margin-right: 10px; margin-bottom: 5px; line-height: 30px; border-radius: 5px; background: #d4a5e7;">#d4a5e7</div>    <div style="width: 100px; height:30px; margin-right: 10px; margin-bottom: 5px; line-height: 30px; border-radius: 5px; background: #d6e7a5;">#d6e7a5</div>    <div style="width: 100px; height:30px; margin-right: 10px; margin-bottom: 5px; line-height: 30px; border-radius: 5px; background: #e7c1a5;">#e7c1a5</div>    <div style="width: 100px; height:30px; margin-right: 10px; margin-bottom: 5px; line-height: 30px; border-radius: 5px; background: #B7C3AC;">#B7C3AC</div>    <div style="width: 100px; height:30px; margin-right: 10px; margin-bottom: 5px; line-height: 30px; border-radius: 5px; background: #d180ac;">#d180ac</div>    <div style="width: 100px; height:30px; margin-right: 10px; margin-bottom: 5px; line-height: 30px; border-radius: 5px; background: #9580d1;">#9580d1</div>    <div style="width: 100px; height:30px; margin-right: 10px; margin-bottom: 5px; line-height: 30px; border-radius: 5px; background: #80a7d1;">#80a7d1</div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据大屏</title>
      <link href="/2023/10/31/qian-duan/shu-ju-da-ping/"/>
      <url>/2023/10/31/qian-duan/shu-ju-da-ping/</url>
      
        <content type="html"><![CDATA[<p>datav插件：<a href="http://datav.jiaminghi.com/">http://datav.jiaminghi.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据大屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Picgo + Gitee搭建免费图床</title>
      <link href="/2023/10/21/ji-lu/picgo-gitee-da-jian-mian-fei-tu-chuang/"/>
      <url>/2023/10/21/ji-lu/picgo-gitee-da-jian-mian-fei-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="1、Gitee准备"><a href="#1、Gitee准备" class="headerlink" title="1、Gitee准备"></a>1、Gitee准备</h3><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>创建一个仓库用来存储上传的图片，选择开源</p><h4 id="创建私人令牌-token"><a href="#创建私人令牌-token" class="headerlink" title="创建私人令牌-token"></a>创建私人令牌-token</h4><blockquote><p>切记：令牌只显示一次，生成令牌后保存一份，后续要用到，否则就要重新生成</p></blockquote><p><img src="https://gitee.com/syy1101/image/raw/master/20231021-1.png" alt="创建私人令牌"></p><p><img src="https://gitee.com/syy1101/image/raw/master/20231021-2.png" alt="创建私人令牌"></p><h3 id="2、PicGo下载安装"><a href="#2、PicGo下载安装" class="headerlink" title="2、PicGo下载安装"></a>2、PicGo下载安装</h3><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><h4 id="2-1-gitee插件配置"><a href="#2-1-gitee插件配置" class="headerlink" title="2.1 gitee插件配置"></a>2.1 gitee插件配置</h4><p>1、打开PicGo，选择插件设置，搜索并安装<code>gitee-uploader</code></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/21654028/1697856502532-df594e97-f89a-456d-bc49-d2bd27f98f06.png" alt="插件配置"></p><p>2、配置<code>gitee-uploader</code></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/21654028/1697856604066-77c67e5a-916c-44d6-a12e-cef322282693.png" alt="配置"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/21654028/1697856630880-4c8295dc-73b0-49b5-a013-088e63eeabec.png" alt="配置"></p><ul><li>名称：自定义</li><li>repo：仓库地址<blockquote><p>假如你的仓库地址为：<code>https://gitee.com/zhangsan/zhangsan-image.git</code><br>只需要输入：<code>zhangsan/zhangsan-image</code></p></blockquote></li><li>branch：master</li><li>token：第一步中生成的令牌</li></ul><p>3、图床设置</p><p>选择<code>gitee</code>，选中配置好的图床名称，将其设置为默认图床</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/21654028/1697856958501-5ad8c85d-85f6-4951-a4e7-5458ae41f81d.png" alt="配置"></p><p>至此，基本完成，可上传图片。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>1、Error: Error in repo name</p><p>此错误是gitee-uploader仓库配置有误，请检查配置。</p><p>2、”message”: “Not Found Project”</p><p>配置仓库地址时，可能添加了<code>.git</code>后缀，请检查</p><p>3、”message”: “Branch”</p><p>配置的分支有误，如配置了<code>master</code>，但是对应仓库未进行初始化，故没有<code>master</code>分支</p><p>4、Error: Error in repo name at new Octo….</p><p>picGo图床设置中repo项配置有误。<br>老版本中repo项需要填写完整的仓库地址：<a href="https://gitee.com/%E6%B3%A8%E5%86%8C%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D.git">https://gitee.com/注册名/仓库名.git</a><br>新版本的picGo，repo项只需要填写“注册名&#x2F;仓库名”即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp中map组件自定义气泡</title>
      <link href="/2023/10/18/qian-duan/uniapp-zhong-map-zu-jian-zi-ding-yi-qi-pao/"/>
      <url>/2023/10/18/qian-duan/uniapp-zhong-map-zu-jian-zi-ding-yi-qi-pao/</url>
      
        <content type="html"><![CDATA[<h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p>小程序中需要对地图打点，同时对打点处气泡自定义样式（文案+图标）</p><p>在小程序中 使用uni-app中的map组件加载地图，并对特定位置进行标记（markers）</p><p><code>markers.callout = &#123;&#125;</code>可以对标记的气泡进行设置，但是仅支持边框，字号，颜色，背景等基础设置</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h3><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;template&gt;    &lt;view class&#x3D;&quot;map-wrap&quot;&gt;        &lt;map class&#x3D;&quot;map&quot; :markers&#x3D;&quot;markers&quot; :latitude&#x3D;&quot;latitude&quot;            :longitude&#x3D;&quot;longitude&quot; :scale&#x3D;&quot;16&quot; @markertap&#x3D;&quot;markerTap&quot;&gt;            &lt;cover-view slot&#x3D;&quot;callout&quot;&gt;                &lt;block v-for&#x3D;&quot;(item, index) in customCalloutMarkerIds&quot; :key&#x3D;&quot;index&quot;&gt;                    &lt;cover-view class&#x3D;&quot;customCallout&quot; :marker-id&#x3D;&quot;item&quot;&gt;                        &lt;cover-view class&#x3D;&quot;txt&quot;&gt;&#123;&#123;markers[index].locationName&#125;&#125;&lt;&#x2F;cover-view&gt;                        &lt;cover-image :src&#x3D;&quot;markersImgs[index]&quot; class&#x3D;&quot;content-image&quot;&gt;&lt;&#x2F;cover-image&gt;                    &lt;&#x2F;cover-view&gt;                &lt;&#x2F;block&gt;            &lt;&#x2F;cover-view&gt;        &lt;&#x2F;map&gt;        &lt;video :src&#x3D;&quot;curVideo&quot; v-if&#x3D;&quot;curVideo&quot;&gt;&lt;&#x2F;video&gt;    &lt;&#x2F;view&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">latitude</span><span class="token operator">:</span> <span class="token number">34.788195</span><span class="token punctuation">,</span>                <span class="token literal-property property">longitude</span><span class="token operator">:</span> <span class="token number">113.685064</span><span class="token punctuation">,</span>                <span class="token literal-property property">videos</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token string">"https://img.cdn.aliyun.dcloud.net.cn/guide/uniapp/%E7%AC%AC1%E8%AE%B2%EF%BC%88uni-app%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D%EF%BC%89-%20DCloud%E5%AE%98%E6%96%B9%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B@20200317.mp4"</span><span class="token punctuation">,</span>                    <span class="token string">"https://img.cdn.aliyun.dcloud.net.cn/guide/uniapp/%E7%AC%AC1%E8%AE%B2%EF%BC%88uni-app%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D%EF%BC%89-%20DCloud%E5%AE%98%E6%96%B9%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B@20200317.mp4"</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">markersImgs</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">'https://img1.baidu.com/it/u=426464644,1372554843&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=570'</span><span class="token punctuation">,</span>                    <span class="token string">"https://img1.baidu.com/it/u=3269176678,389813562&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500"</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">curVideo</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">//当前点击视频</span>                <span class="token literal-property property">customCalloutMarkerIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 地图markers ID列表</span>                <span class="token literal-property property">markers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token literal-property property">latitude</span><span class="token operator">:</span> <span class="token number">34.788195</span><span class="token punctuation">,</span>                    <span class="token literal-property property">longitude</span><span class="token operator">:</span> <span class="token number">113.685064</span><span class="token punctuation">,</span>                    <span class="token literal-property property">iconPath</span><span class="token operator">:</span> <span class="token string">'https://h5.dhcc.wang/images/huatuitui/group_ic_team.png'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">,</span>                    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">,</span>                    <span class="token literal-property property">locationName</span><span class="token operator">:</span> <span class="token string">'动物园'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">customCallout</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">anchorY</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>                        <span class="token literal-property property">anchorX</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                        <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">'ALWAYS'</span><span class="token punctuation">,</span> <span class="token comment">// BYCLICK 点击显示气泡  ALWAYS常显示</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                    <span class="token literal-property property">latitude</span><span class="token operator">:</span> <span class="token number">34.787256</span><span class="token punctuation">,</span>                    <span class="token literal-property property">longitude</span><span class="token operator">:</span> <span class="token number">113.673733</span><span class="token punctuation">,</span>                    <span class="token literal-property property">iconPath</span><span class="token operator">:</span> <span class="token string">'https://h5.dhcc.wang/images/huatuitui/group_ic_team.png'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>                    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>                    <span class="token literal-property property">locationName</span><span class="token operator">:</span> <span class="token string">'河南省博物院'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">customCallout</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 自定义气泡</span>                        <span class="token literal-property property">anchorY</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>                        <span class="token literal-property property">anchorX</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                        <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">'ALWAYS'</span><span class="token punctuation">,</span> <span class="token comment">// ALWAYS 总是显示</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">markerTap</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 点击标记点时，播放对应的视频</span>                <span class="token keyword">let</span> markers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>markers                markers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">==</span> e<span class="token punctuation">.</span>markerId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>curVideo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>videos<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                        item<span class="token punctuation">.</span>customCallout<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'ALWAYS'</span> <span class="token comment">// 点击marker 显示地点名</span>                        item<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                         item<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">;</span>                      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        item<span class="token punctuation">.</span>customCallout<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'NONE'</span><span class="token punctuation">;</span>                        item<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>                        item<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS-部分"><a href="#CSS-部分" class="headerlink" title="CSS 部分"></a>CSS 部分</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style lang="less" scoped>    video</span><span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span>10%<span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span>20rpx<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>200rpx<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.map-wrap</span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token selector">.map</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.customCallout</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #FFFFFF<span class="token punctuation">;</span>        <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0px 8rpx 32rpx 0px <span class="token function">rgba</span><span class="token punctuation">(</span>189<span class="token punctuation">,</span> 191<span class="token punctuation">,</span> 193<span class="token punctuation">,</span> 0.4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 10rpx<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 6rpx 24rpx<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token selector">.content-image</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 60rpx<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 60rpx<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 10rpx<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.txt</span><span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 32rpx<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h3><p><img src="https://img-blog.csdnimg.cn/a71b4abf25d643d9b9f9d9d65daa5e7b.png#pic_center" alt="实际效果"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-for遍历渲染图片，获取元素的offsetTop不准确</title>
      <link href="/2023/10/13/qian-duan/offset-wu-chai-wen-ti/"/>
      <url>/2023/10/13/qian-duan/offset-wu-chai-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>使用v-for渲染包含大量图片的数据时，获取元素的offsetTop不准确，导致无法滚动到指定位置</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>仿照微信聊天页，实现聊天室页面，初始滚动到页面最底部，滚动条到顶部时加载新数据，并将滚动条定位到到前一页数据的顶部。</p><p>由于数据中包含大量图片，在通过offsetTop设置滚动条位置时，总是有偏移，图片越多越明显</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 每次滚动到最后一条新数据的位置</span><span class="token keyword">let</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'list-item'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTopdocument<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> scrollTop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>一般情况下，出现这种问题大多与图片加载有关，Dom渲染后，图片还未加载完成，只是占了一个位置，此时获取到的offsetTop并不包含图片的高度，所以出现问题</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><font color="red">解决方案</font></h2><h3 id="方案一：固定高度（目前再用）"><a href="#方案一：固定高度（目前再用）" class="headerlink" title="方案一：固定高度（目前再用）"></a>方案一：固定高度（目前再用）</h3><p>既然图片未加载完成，offsetTop获取不到图片的高，那么我们给图片加一个盒子，并给盒子固定高度，让图片在盒子里自适应，那么不管图片是否加载完，这一组元素的高度都已经固定了，就能准确获取元素的offsetTop了</p><blockquote><p>缺陷：图片尺寸宽高比差异过大，部分图片会出现变形，故需要设置个比较合适的宽高，</p></blockquote><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div class&#x3D;&quot;media-box opc-0&quot;&gt;&lt;img v-lazy&#x3D;&quot;item.url+&#39;?x-oss-process&#x3D;style&#x2F;thumb&#39;&quot; class&#x3D;&quot;msg-img&quot;  alt&#x3D;&quot;&quot;&gt;&lt;&#x2F;div&gt;.media-box &#123;max-width: xx;height: xx;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方案二：结合图片加载方法（待验证）"><a href="#方案二：结合图片加载方法（待验证）" class="headerlink" title="方案二：结合图片加载方法（待验证）"></a>方案二：结合图片加载方法（待验证）</h3><p>既然offsetTop受到图片加载的影响，那么我们就在图片加载完成后再获取offsetTop，结合图片的load方法</p><blockquote><p>注意：要结合Debounce（防抖）函数使用，避免被重复触发</p></blockquote><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;img src&#x3D;&quot;&quot; @load&#x3D;&quot;imgLoad&quot; &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>imgLoad <span class="token operator">=</span> <span class="token function">Debounce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>imgLoad<span class="token punctuation">)</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">imgLoad</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'xx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>offsetTopdocument<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> scrollTop<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Hexo博客主题修改的记录</title>
      <link href="/2023/09/27/hexo/zhu-ti-xiu-gai-ji-lu/"/>
      <url>/2023/09/27/hexo/zhu-ti-xiu-gai-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>** 主题： ** 安知鱼 </p><p>参考文档：<a href="https://docs.anheyu.com/">https://docs.anheyu.com/</a></p><p>安知鱼博客地址：<a href="https://blog.anheyu.com/">https://blog.anheyu.com/</a></p><h2 id="为什么要修改主题？"><a href="#为什么要修改主题？" class="headerlink" title="为什么要修改主题？"></a>为什么要修改主题？</h2><p>之前使用的<code>butterfly</code>，起初看起来还好，后来越来越觉得眼花缭乱，于是有了更换主题的想法</p><h2 id="为什么选择安知鱼？"><a href="#为什么选择安知鱼？" class="headerlink" title="为什么选择安知鱼？"></a>为什么选择安知鱼？</h2><p>最初魔改<code>butterfly</code>的时候看到过作者的B站视频，然后顺藤摸瓜看到了作者的博客，瞬间被吸引。</p><p>页面简洁，风格有趣</p><h2 id="博客内容中图片防盗链问题"><a href="#博客内容中图片防盗链问题" class="headerlink" title="博客内容中图片防盗链问题"></a>博客内容中图片防盗链问题</h2><p>给图片添加上属性 referrerpolicy&#x3D;”no-referrer”<br>路径：themes-&gt;anzhiyu-&gt;scripts-&gt;filters-&gt;post_lazyload.js-&gt;htmlContent.replace方法中的内容</p><h2 id="主题标签"><a href="#主题标签" class="headerlink" title="主题标签"></a>主题标签</h2><p>安知鱼主题标签： <a href="https://blog.anheyu.com/posts/d50a.html">https://blog.anheyu.com/posts/d50a.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="/2023/09/11/qian-duan/xing-neng-you-hua/"/>
      <url>/2023/09/11/qian-duan/xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="大方向"><a href="#大方向" class="headerlink" title="大方向"></a>大方向</h2><p>前端性能优化可以从以下几个方面入手：</p><ul><li>加载优化</li><li>执行优化</li><li>渲染优化</li><li>脚本优化</li><li>代码优化</li></ul><h3 id="加载优化"><a href="#加载优化" class="headerlink" title="加载优化"></a>加载优化</h3><p>减少HTTP请求、缓存资源、压缩代码、无阻塞、首屏加载、按需加载、预加载、压缩图像、减少Cookie、避免重定向、异步加载第三方资源。</p><h3 id="执行优化"><a href="#执行优化" class="headerlink" title="执行优化"></a>执行优化</h3><p>CSS写在头部，JS写在尾部并异步、避免img、iframe等的src为空、尽量避免重置图像大小、图像尽量避免使用DataURL</p><h3 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h3><p>设置viewport、减少DOM节点、优化动画、优化高频事件、GPU加速</p><h3 id="样式优化"><a href="#样式优化" class="headerlink" title="样式优化"></a>样式优化</h3><p>避免在HTML中书写style、避免CSS表达式、移除CSS空规则、正确使用display：display、不滥用float等</p><h3 id="脚本优化"><a href="#脚本优化" class="headerlink" title="脚本优化"></a>脚本优化</h3><p>减少重绘和回流、缓存DOM选择与计算、缓存.length的值、尽量使用事件代理、尽量使用id选择器、touch事件优化.</p><h2 id="加载优化-1"><a href="#加载优化-1" class="headerlink" title="加载优化"></a>加载优化</h2><ol><li>减少http请求，尽量减少页面的请求数。（首次加载同时请求数不能超过4个）</li></ol><ul><li>合并CSS与JS</li><li>使用CSS雪碧图</li></ul><ol start="2"><li>缓存资源：使用缓存可减少向服务器的请求数，节省加载时间，所有静态资源都要在服务器端设置缓存，并且尽量使用长缓存(使用时间戳更新缓存)。</li></ol><ul><li>缓存一切可缓存的资源</li><li>使用长缓存</li><li>使用外联的样式和脚本</li></ul><ol start="3"><li>压缩代码：减少资源大小可加快网页显示速度，对代码进行压缩，并在服务器端设置GZip</li></ol><ul><li>压缩代码(多余的缩进、空格和换行符)</li><li>启用Gzip</li></ul><ol start="4"><li>无阻塞：头部内联的样式和脚本会阻塞页面的渲染，样式放在头部并使用link方式引入，脚本放在尾部并使用异步方式加载。</li><li>首屏加载：首屏快速显示可大大提升用户对页面速度的感知，应尽量针对首屏的快速显示做优化</li><li>按需加载：将不影响首屏的资源和当前屏幕不用的资源放到用户需要时才加载，可大大提升显示速度和降低总体流量(按需加载会导致大量重绘，影响渲染性能)</li></ol><ul><li>按需加载</li><li>滚动加载</li><li>Media Query加载</li></ul><ol start="7"><li>预加载：大型资源页面可使用Loading，资源加载完成后再显示页面，但加载时间过长，会造成用户流失</li></ol><ul><li>可感知Loading：进入页面时Loading</li><li>不可感知Loading：提前加载下一页</li></ul><ol start="8"><li>压缩图像：使用图像时选择最合适的格式和大小，然后使用工具压缩，同时在代码中用srcset来按需显示过度压缩图像大小影响图像显示效果。</li></ol><ul><li>使用TinyJpg和TinyPng压缩图像</li><li>使用CSS3、SVG、IconFont代替图像</li><li>使用img的srcset按需加载图像</li><li>选择合适的图像：webp优于jpg，png8优于gif</li><li>选择合适的大小：首次加载不大于1014kb、不 宽于640px，<br>  PS切图时D端图像保存质量为80，M端图像保存质量为60</li></ul><ol start="9"><li>减少cookie:cookie影响加载速度，静态资源域名不使用cookie.</li><li>避免重定向：重定向会影响加载速度，在服务器正确设置避免重定向</li><li>异步加载第三方资源：第三方资源不可控会影响页面的加载和显示，要异步加载第三方资源。</li></ol><h2 id="执行优化-1"><a href="#执行优化-1" class="headerlink" title="执行优化"></a>执行优化</h2><ol><li>css写在头部，js写在尾部并异步。</li><li>避免img、iframe等的src为空：空src会重新加载当前页面，影响速度和效率。</li><li>尽量避免重置图像大小：多次重置图像大小会引发图像的多次重绘，影响性能</li><li>图像尽量避免使用DataURL：DataURL图像没有使用图像的压缩算法，文件会变大，并且要解码后再渲染，加载慢耗时长。</li></ol><h2 id="渲染优化-1"><a href="#渲染优化-1" class="headerlink" title="渲染优化"></a>渲染优化</h2><ol><li><p>设置viewport:HTML的viewport可加速页面的渲染</p></li><li><p>减少DOM节点：DOM节点太多影响页面的渲染，尽量减少DOM节点。</p></li><li><p>优化动画</p></li></ol><ul><li>尽量使用css3动画</li><li>合理使用requestAnimationFrame动画代替setTimeout.</li><li>适当使用canvas动画：5个元素以内使用css动画，5个元素使用canvas动画，iOS8+可使用WebGL动画。</li></ul><ol start="4"><li>优化高频事件：scroll、touchmove等事件可导致多次渲染。</li></ol><ul><li>函数节流</li><li>函数防抖</li><li>使用requestAnimationFrame监听帧变化：使得在正确的时间进行渲染</li><li>增加响应变化的时间间隔：减少重绘次数</li></ul><ol start="5"><li>GPU加速:使用某些html5标签和css3属性触发GPU渲染，请合理使用(过渡使用会引发手机耗电量增加)。</li></ol><ul><li>html标签：video,canvas，webgl</li><li>css属性，opacity,transform，transition</li></ul><p>持续更新中。。。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端八股文-HTML+CSS</title>
      <link href="/2023/08/21/qian-duan-ba-gu-wen/qian-duan-ba-gu-wen-html-css/"/>
      <url>/2023/08/21/qian-duan-ba-gu-wen/qian-duan-ba-gu-wen-html-css/</url>
      
        <content type="html"><![CDATA[<p>该篇文章只要记录前端面试中常见的HTML与CSS面试题目</p><h3 id="盒模型？标准盒模型-怪异盒模型？"><a href="#盒模型？标准盒模型-怪异盒模型？" class="headerlink" title="盒模型？标准盒模型+怪异盒模型？"></a>盒模型？标准盒模型+怪异盒模型？</h3><p>盒模型，顾名思义就是一个盒子，这个盒子由外到内依次是margin-&gt;border-&gt;padding-&gt;content</p><p>通过border-sizing可以对标准盒模型与怪异盒模型进行切换</p><p>标准盒模型：指的是content+padding+border</p><p>怪异盒模型： 指的是content，不包含border与padding</p><h3 id="块级元素与行内元素的区别？常见的块级元素与行内元素"><a href="#块级元素与行内元素的区别？常见的块级元素与行内元素" class="headerlink" title="块级元素与行内元素的区别？常见的块级元素与行内元素"></a>块级元素与行内元素的区别？常见的块级元素与行内元素</h3><p>块元素：独占一行，默认宽度为父元素的宽度，可设置宽高，内外边距<br>行内元素：宽内为内容宽度，不可设置宽高，可在水平方向上设置padding、margin，垂直方向设置padding、margin无效</p><h3 id="HTML的语义化标签都有哪些"><a href="#HTML的语义化标签都有哪些" class="headerlink" title="HTML的语义化标签都有哪些"></a>HTML的语义化标签都有哪些</h3><ul><li>header</li><li>nav</li><li>section</li><li>article</li><li>aside</li><li>main</li><li>footer</li></ul><h3 id="伪元素和伪类的区别？"><a href="#伪元素和伪类的区别？" class="headerlink" title="伪元素和伪类的区别？"></a>伪元素和伪类的区别？</h3><ul><li>作用不同：伪类是一种状态，可以看作是一种选择器，如：hover、foucs、：nth-child；伪元素是一个元素，是通过CSS模拟出来的盒模型。</li><li>权重不同：伪类 是 10 （类、属性选择器 [type&#x3D;submit]）；伪元素 是 1 (标签选择器 )</li></ul><h3 id="CSS如何实现垂直居中？"><a href="#CSS如何实现垂直居中？" class="headerlink" title="CSS如何实现垂直居中？"></a>CSS如何实现垂直居中？</h3><ul><li>flex</li><li>position</li></ul><h3 id="CSS常见的选择器？"><a href="#CSS常见的选择器？" class="headerlink" title="CSS常见的选择器？"></a>CSS常见的选择器？</h3><ul><li>ID选择器</li><li>类选择器</li><li>标签选择器</li><li>属性选择器 （p(class&#x3D;”xx”) 选中class值为xx的P标签）</li><li>通配符选择器 *</li></ul><h3 id="CSS选择器的优先级"><a href="#CSS选择器的优先级" class="headerlink" title="CSS选择器的优先级"></a>CSS选择器的优先级</h3><p><strong>!important &gt; id选择器 &gt; class选择器 &gt; 属性选择器 &gt; 标签选择器 &gt; 通配符选择器</strong></p><h3 id="长度单位PX、em、rem的区别是什么？"><a href="#长度单位PX、em、rem的区别是什么？" class="headerlink" title="长度单位PX、em、rem的区别是什么？"></a>长度单位PX、em、rem的区别是什么？</h3><ol><li>PX是基本单位，绝对长度</li><li>em相对于当前元素的font-size，相对单位</li><li>rem相对于根元素的font-size</li></ol><h3 id="关于弹性盒布局"><a href="#关于弹性盒布局" class="headerlink" title="关于弹性盒布局"></a>关于弹性盒布局</h3><p>即弹性布局，为盒状模型提供最大的灵活性。 任何一个容器都可以指定为 Flex 布局。</p><p>采用flex布局的盒子成为容器，容器中的所欲子元素，自动成为容器成员，称为“项目”</p><p>包含两根轴：水平方向的主轴，垂直方向上的交叉轴</p><p>设置在容器上的属性：</p><ul><li><p>flex-direction：指定容器主轴的方向 （row | row-reverse | column | column-reverse;）</p></li><li><p>flex-wrap：项目排列在轴线上，如果轴线上排列不下，要如何换行 （nowrap | wrap | wrap-reverse;）</p></li><li><p>flex-flow：flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap</p></li><li><p>justify-content：主轴对齐方式</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔 大一倍。</li></ul></li><li><p>align-items：交叉轴上对齐方式</p></li><li><p>align-content</p></li></ul><p>设置在项目上的属性：</p><ul><li>order：定义项目的排列顺序。数值越小，排列越靠前，默认为 0</li><li>flex-grow：表示在当前元素占多少份</li><li>flex-shrink：子元素的宽度大于父元素宽度时，要收缩的值</li><li>flex-basis：表示 flex中的剩余空间的大小</li><li>flex：flex：1相当于 <code>flex: flex-grow flex-shrink flex-basis</code></li><li>align-self：单独给项目设置交叉轴的对齐方式</li></ul><h3 id="浮动塌陷问题的解决方法？"><a href="#浮动塌陷问题的解决方法？" class="headerlink" title="浮动塌陷问题的解决方法？"></a>浮动塌陷问题的解决方法？</h3><ol><li>给浮动元素的父元素添加高度</li><li>clear: both | left | rigth</li><li>在浮动元素后面添加一个空元素，设置clear：both</li><li>给浮动的盒子添加一个伪元素:after，设置clear: both</li><li>overflow: hidden</li></ol><h3 id="position属性值及其含义"><a href="#position属性值及其含义" class="headerlink" title="position属性值及其含义"></a>position属性值及其含义</h3><ul><li>static: 默认值，没有定位</li><li>fixed：固定定位，相对于浏览器窗口进行定位</li><li>absolute： 绝对定位，相对于第一个有定位的父元素定位</li><li>relative： 相对定位，根据定位元素自身的位置进行定位</li></ul><h3 id="BFC、IFC是什么？"><a href="#BFC、IFC是什么？" class="headerlink" title="BFC、IFC是什么？"></a>BFC、IFC是什么？</h3><p><code>BFC</code>：块级格式化上下文，达到隔离的作用，让满足条件的元素内部的子元素不会影响到元素内部。<strong>解决margin塌陷问题</strong><br>    每个BFC区域都是独立的，她只包含该上下文中的所有子元素（直接后代），不包含创建了新的BFC区域的子元素的内部元素<br>    <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bfc1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box5<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“bfc2”</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    用这段代码来举例，#bfc1是一块BFC区域，这块区域包含了box2、box3、box4、box5，同时bfc2又创建了一个新的BFC区域，这块区域只包含box6、box7。而bfc1这块区域并不包含box6、box7<br>    <strong>⭐️⭐️⭐️BFC触发条件</strong><br>    - float<br>    - overflow： hidden ｜ auto ｜ scroll<br>    - disply：inline-block ｜ table-cell ｜ table-caption ｜ flex<br>    - position： absolute ｜ fixed<br><code>IFC</code>： 行内格式化上下文</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅行-苏州</title>
      <link href="/2023/03/07/lu-xing/su-zhou/"/>
      <url>/2023/03/07/lu-xing/su-zhou/</url>
      
        <content type="html"><![CDATA[<p>在杭州的第6个年头，终于来了一次苏州游。</p><p>时间：2023年3月4号</p><p>事件：2023LPL春季赛 上海EDG VS 苏州LNG</p><p><strong><font size="4"><center>抵达苏州</center></font></strong></p><p>第一次来苏州，有点紧张，有一丢丢兴奋。</p><p>到苏州我先去办理了入住，就住在观前街附近，于是乎，冲啊，瞎逛，就逛到了赫赫有名的观前街</p><p><img src="https://img-blog.csdnimg.cn/bef71d81d16f4949a93135a13310ad37.jpeg#pic_center" alt="苏州站"></p><p><img src="https://img-blog.csdnimg.cn/7bce37efd0d54d899a92a7179ceb614d.jpeg#pic_center" alt="观前街"></p><p><img src="https://img-blog.csdnimg.cn/28f5c3c6b0014b57bc095051651fa0c7.jpeg#pic_center" alt="川福楼"></p><p><strong><font size="4"><center>汇合</center></font></strong></p><p>晚上十一点，看比赛的终于回来了，然后出门干饭，第一次吃饭吃到凌晨一点钟。</p><p><img src="https://img-blog.csdnimg.cn/a344689448824c8db3f0ec8bc56f71cd.jpeg#pic_center" alt="马路边边"></p><p><img src="https://img-blog.csdnimg.cn/e5d09f81dea04b47b4cbf7f8bf7eb1a8.jpeg#pic_center" alt="马路边边"></p><p><strong><font size="4"><center>游玩</center></font></strong></p><p>跟朋友一觉睡到十一点，出门玩能这样睡的估计就我俩了。</p><p>从观前街一路走到平江路再到拙政园，没错，就是那个号称一步一景的“拙政园”。可能它真的美，可是我get不到也是真的。一定是我眼光有问题。</p><p>然后走到狮子林，这里没进去，云参观了一下，来过即见过。</p><p><img src="https://img-blog.csdnimg.cn/7ac1e36335d34fbab3c9aa1652b69a0d.jpeg#pic_center" alt="拙政园"></p><p><img src="https://img-blog.csdnimg.cn/c19a37c83cc44b5487a1ffdc096cdf2e.jpeg#pic_center" alt="拙政园"></p><p><img src="https://img-blog.csdnimg.cn/fd98c58c58e045e9808ff62a5317c13b.jpeg#pic_center" alt="拙政园"></p><p><img src="https://img-blog.csdnimg.cn/f4d7148e352b45f5a05917906786321c.jpeg#pic_center" alt="拙政园"></p><p>实在是走不动了，打车去了七里山塘。和作为江南百景图资深玩家的朋友一起打卡七只狸猫（累到想吐🤮🤮）。</p><p>七里山塘人真多啊（周迅：好多人啊😊）</p><p><img src="https://img-blog.csdnimg.cn/1396bc101bbb456ea9e77a524bfd925b.jpeg#pic_center" alt="七里山塘"></p><p><img src="https://img-blog.csdnimg.cn/6dcc3f453449458eb1dc420887d9f7df.jpeg#pic_center" alt="七里山塘"></p><p><img src="https://img-blog.csdnimg.cn/605e3f8241314f02b4d866191e303128.jpeg#pic_center" alt="天子笑"></p><p><img src="https://img-blog.csdnimg.cn/f06f910e541c4e39862e4f255a8f1231.jpeg#pic_center" alt="七里山塘"></p><p><strong><font size="4"><center>其他</center></font></strong></p><p><img src="https://img-blog.csdnimg.cn/c12bab31d3344ec2ac8c558531c21b4a.jpeg#pic_center" alt="玉兰"></p><p><img src="https://img-blog.csdnimg.cn/5bfab5fcb72a422ea8262f9f81dad4d4.jpeg#pic_center" alt="不知名小花"></p><p><img src="https://img-blog.csdnimg.cn/75a4b23947824fa3a2e82ce3d928c368.jpeg#pic_center" alt="LPL春季赛"></p><p><strong><font size="4"><center>感悟</center></font></strong></p><p>再也不想去了，累死。本来这从山塘街骑车回宾馆，结果市中心不能停放单车，可惜了我的10块钱调度费。</p><p>人具多，在山塘河的小桥上，完全没有欣赏的念头，一心想着赶紧下去，万一发生踩踏事件，毕竟那真的是人挨着人。</p><p><img src="https://img-blog.csdnimg.cn/94315fbc4e5645ea8a51d5a68b7e847f.jpeg#pic_center" alt="感悟"></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 苏州 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app入门</title>
      <link href="/2023/02/26/uniapp/index/"/>
      <url>/2023/02/26/uniapp/index/</url>
      
        <content type="html"><![CDATA[<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p><a href="https://uniapp.dcloud.net.cn/">官方文档入口</a></p></blockquote><ol><li>页面生命周期</li></ol><p><code>onLoad</code>：监听页面加载，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参）<br><code>onShow</code>：监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面<br><code>onReady</code>：监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发<br><code>onHide</code>：监听页面隐藏<br><code>onPullDownRefresh</code>：监听用户下拉动作，一般用于下拉刷新<br><code>onReachBottom</code>：页面滚动到底部的事件（不是scroll-view滚到底），常用于下拉下一页数据。具体见下方注意事项</p><ol start="2"><li>组件生命周期</li></ol><p><code>beforeCreate</code>：在实例初始化之前被调用<br><code>created</code>：实例被创建之后调用<br><code>beforeMount</code>：在挂载开始之前被调用<br><code>mounted</code>：挂载到实例上去之后调用。<br><code>beforeUpdate</code>：数据更新时调用<br><code>updated</code>：由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子<br><code>beforeDestroy</code>：实例销毁之前调用<br><code>destoryed</code>：实例销毁后调用</p><h3 id="页面调用接口"><a href="#页面调用接口" class="headerlink" title="页面调用接口"></a>页面调用接口</h3><ol><li>getApp()<br><code>getApp()</code>函数用于获取当前应用实例，一般用于获取globalData</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>globalData<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>不要在定义于 App() 内的函数中，或调用 App 前调用 getApp() ，可以通过 this.$scope 获取对应的app实例</li><li>通过 getApp() 获取实例之后，不要私自调用生命周期函数。</li><li>当在首页nvue中使用getApp()不一定可以获取真正的App对象。对此提供了const app &#x3D; getApp({allowDefault: true})用来获取原始的App对象，可以用来在首页对globalData等初始化</li></ul><ol start="2"><li>getCurrentPages</li></ol><p><code>getCurrentPages</code>函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面<br><strong>注意</strong>：<br><code>getCurrentPage()</code>仅用于展示页面栈的情况，请勿修改页面栈，以免造成页面状态错误</p><h3 id="页面通信"><a href="#页面通信" class="headerlink" title="页面通信"></a>页面通信</h3><ol><li>uni.$emit(eventName, OBJECT)</li></ol><p>触发全局的自定义事件。附加参数都会传给监听器回调</p><p><code>uni.$emit(&#39;update&#39;, &#123;msg: &#39;页面更新&#39;&#125;)</code></p><ol start="2"><li>uni.$on(eventName, callback)</li></ol><p>监听全局的自定义事件。事件可以由<code>uni.$emit</code>触发，回调函数会接收所有传入事件穿法函数的额外参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">uni<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'监听事件来自update，携带参数msg为：'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>uni.$off([eventname, callback])</li></ol><p>移除全局自定义事件监听器</p><p><strong>Tips：</strong></p><ul><li>如果没有提供参数，则移除所有的事件监听器</li><li>如果只提供了事件，则移除该事件所有的监听器</li><li>如果同时提供了事件与回调，则只移除这个回调的监听器</li><li>提供的回调必须跟<code>$on</code>的回调为同一个才能移除这个回调的监听器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端八股文-网络与安全</title>
      <link href="/2023/02/19/qian-duan-ba-gu-wen/qian-duan-ba-gu-wen-wang-luo-yu-an-quan/"/>
      <url>/2023/02/19/qian-duan-ba-gu-wen/qian-duan-ba-gu-wen-wang-luo-yu-an-quan/</url>
      
        <content type="html"><![CDATA[<h3 id="浏览器缓存？"><a href="#浏览器缓存？" class="headerlink" title="浏览器缓存？"></a>浏览器缓存？</h3><p>session、cookie、localstorage、sessionstorage</p><ul><li>cookie和session都是参与服务器通信的，而localStorage和sessionStorage不参与服务器通信。</li></ul><p>cookie的作用是在客户端保持状态，比如登录状态。它被存储在本地硬盘或内存里，并且在发送http请求的时候会被放进请求头中参与通信。每个cookie最大为4k，每个域名可以拥有的cookie数量在不同浏览器中是不同的，但都多于20个</p><p>session的作用是在服务器端保持状态，它被存储在服务器上。session被创建的时候会生成一个sessionid，它被存储在cookie中用来访问session。由于关闭浏览器不会导致session被删，迫使服务器为session设置了失效时间。</p><ul><li>localStorage和sessionStorage都属于webStorage本地存储，不参与服务器通信。而且它们都属于window对象，最大存储都在5M左右</li></ul><p>localStorage是永久存储。sessionStorage的存储时间是当前会话，关闭页面或浏览器就会被清除</p><p>localStorage可以用来长期保存登陆信息。而sessionStorage可以用来一次性保存登陆信息，而且不同浏览器不共享。</p><h3 id="从输入Url到渲染出整个页面的过程？"><a href="#从输入Url到渲染出整个页面的过程？" class="headerlink" title="从输入Url到渲染出整个页面的过程？"></a>从输入Url到渲染出整个页面的过程？</h3><ol><li><p>检查缓存：如果浏览器有本地的静态资源缓存，并且未过期，就直接从缓存中读取，不再发送网络请求</p></li><li><p>DNS解析：将输入的url对应的域名解析成对应的ip</p></li><li><p>发送http请求：建立TCP连接，发送http请求，并接收响应。如果状态码为301&#x2F;302还需要重定向</p></li><li><p>将响应数据提交给渲染进程处理：渲染进程解析HTML</p></li><li><p>构建DOM：将HTML数据转换成DOM</p></li><li><p>样式计算：根据规则计算每隔DOM节点的具体样式，得到ComputedStyle树</p></li><li><p>布局：根据DOM树和ComputedStyle，计算所有可见元素的坐标，生成一个新的树：布局树。</p></li><li><p>分层：根据布局树生成不同的图层，得到分层树（LayerTree）</p></li><li><p>绘制</p></li><li><p>分块</p></li><li><p>栅格化</p></li><li><p>合成</p></li></ol><h3 id="跨域？jsonp原理？"><a href="#跨域？jsonp原理？" class="headerlink" title="跨域？jsonp原理？"></a>跨域？jsonp原理？</h3><p>出于浏览器的同源策略限制，协议、端口、域名任意一个与当前页面不同就会出现跨域</p><p>解决方法：服务器代理（Proxy），JSONP，CORS</p><p>jsonp原理：动态创建script标签，通过script标签src属性不存在跨域问题，设置callback用于接收返回的数据</p><h3 id="http各个版本的改进都是什么？"><a href="#http各个版本的改进都是什么？" class="headerlink" title="http各个版本的改进都是什么？"></a>http各个版本的改进都是什么？</h3><h3 id="http常见状态码？"><a href="#http常见状态码？" class="headerlink" title="http常见状态码？"></a>http常见状态码？</h3><p>404-找不到</p><p>403-forbiden</p><p>500-服务器异常</p><p>502-网关超时</p><h3 id="进程与线程？"><a href="#进程与线程？" class="headerlink" title="进程与线程？"></a>进程与线程？</h3><h3 id="TCP三次握手，四次挥手？"><a href="#TCP三次握手，四次挥手？" class="headerlink" title="TCP三次握手，四次挥手？"></a>TCP三次握手，四次挥手？</h3><p>挥手要四次：多一次是因为要断开TCP连接</p><h3 id="TCP与UDP是什么？"><a href="#TCP与UDP是什么？" class="headerlink" title="TCP与UDP是什么？"></a>TCP与UDP是什么？</h3><p>都属于传输协议<br>TCP需要三次连接，UDP无需连接<br>TCP保证数据顺序，UDP不保证</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端八股文-工程化+性能优化</title>
      <link href="/2023/02/19/qian-duan-ba-gu-wen/qian-duan-ba-gu-wen-gong-cheng-hua-xing-neng-you-hua/"/>
      <url>/2023/02/19/qian-duan-ba-gu-wen/qian-duan-ba-gu-wen-gong-cheng-hua-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><h3 id="webpack原理？"><a href="#webpack原理？" class="headerlink" title="webpack原理？"></a>webpack原理？</h3><p>webpack读取配置，根据入口开始遍历文件，解析依赖，使用loader处理各模块，然后将文件打包成bundle后输出到output指定的目录中</p><h3 id="webpack解决了什么问题？"><a href="#webpack解决了什么问题？" class="headerlink" title="webpack解决了什么问题？"></a>webpack解决了什么问题？</h3><p>webpack是一个前端打包工具，能够进行代码压缩，将文件按照模块进行合并</p><h3 id="webpack性能优化有哪些方法？"><a href="#webpack性能优化有哪些方法？" class="headerlink" title="webpack性能优化有哪些方法？"></a>webpack性能优化有哪些方法？</h3><ol><li><p>提升构建速度：</p><ul><li>使用高版本的webpack与nodejs</li><li>多进程多实例构建</li><li>多进程多实例并行压缩</li><li>预编译资源模块</li><li>充分利用缓存提升二次构建速度</li><li>缩小构建目标</li></ul></li><li><p>提升加载和运行时性能：</p><ul><li>使用tree-shaking擦除无用的js和css</li><li>使用webpack进行图片压缩</li></ul></li></ol><h3 id="webpack构建流程？"><a href="#webpack构建流程？" class="headerlink" title="webpack构建流程？"></a>webpack构建流程？</h3><p>1、Webpack CLI 启动打包流程，解析配置项参数。</p><p>2、载入 Webpack 核心模块，创建 Compiler 对象。</p><p>3、注册plugins。</p><p>4、使用 Compiler 对象开始编译整个项目。</p><p>5、从入口文件开始，解析模块为AST，分析模块依赖，形成依赖关系树。</p><p>6、递归依赖树，将每个模块交给对应的 Loader 处理。</p><p>7、合并 Loader 处理完的结果，将打包结果输出到 dist 目录。</p><h3 id="tree-shaking-原理"><a href="#tree-shaking-原理" class="headerlink" title="tree-shaking 原理"></a>tree-shaking 原理</h3><p>tree-shaking本质是消除没有用到的代码。主要效果是，引用了没有使用的模块，不会被打包到最终的bundle中。</p><h3 id="webpack的loader与pluhin区别是什么？常用的plugin和loader是什么？"><a href="#webpack的loader与pluhin区别是什么？常用的plugin和loader是什么？" class="headerlink" title="webpack的loader与pluhin区别是什么？常用的plugin和loader是什么？"></a>webpack的loader与pluhin区别是什么？常用的plugin和loader是什么？</h3><p>loader用于转换某些类型的模块，而插件则可以用于执行范围更广的任务，如：打包优化，资源管理，注入环境变量等</p><p>常见的loader：<br>    - css-loader： 加载css文件，支持模块化、压缩、文件导入等<br>    - eslint-loader：通过eslint检查代码<br>    - image-loader： 加载并压缩图片文件<br>    - babel-loader：将ES6转成ES5</p><p>常见的plugin：<br>    - html-webpack-plugin：生成html文件<br>    - clean-webpack-plugin：每次打包时候清空上次打包结果</p><h3 id="loader的加载顺序？"><a href="#loader的加载顺序？" class="headerlink" title="loader的加载顺序？"></a>loader的加载顺序？</h3><p>从右往左</p><h3 id="vite与webpack的区别？"><a href="#vite与webpack的区别？" class="headerlink" title="vite与webpack的区别？"></a>vite与webpack的区别？</h3><p>vite原理图：<br><img src="https://img-blog.csdnimg.cn/20210417225611243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjk5MTcxNg==,size_16,color_FFFFFF,t_70" alt="vite原理图"></p><p>webpack原理图：<br><img src="https://img-blog.csdnimg.cn/20210417225533423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjk5MTcxNg==,size_16,color_FFFFFF,t_70" alt="webpack原理图"></p><ul><li><p><font color='red'> webpack </font>：分析依赖&#x3D;》编译打包&#x3D;》本地服务器渲染。首先分析各个模块之间的依赖，然后进行打包，在启动<code>webpack-dev-server</code>，请求服务器时，直接显示打包结果。问题：随着打包模块的增多，会造成最终bundle的体积过大，进而造成热更新速度明显拖慢。</p></li><li><p><font color='red'> vite </font>：启动服务器&#x3D;》请求模块时按需动态编译显示。是先启动服务器，请求某个模块时再进行实时编译，因为现代浏览器本身支持ES-Module，所以会自动向依赖的Module发出请求。所以vite就将开发环境下的模块文件作为浏览器的执行文件，而不是像webpack进行打包后交给本地服务</p></li></ul><p><strong>优缺点</strong><br>    - vite开发阶段，打包快<br>    - vite相关生态没有webpack完善</p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="前端页面性能如何优化？"><a href="#前端页面性能如何优化？" class="headerlink" title="前端页面性能如何优化？"></a>前端页面性能如何优化？</h3><ol><li><p>加载阶段</p><ul><li>资源压缩、删除冗余代码以及其他资源，或者使用更小尺寸的资源，按需加载</li><li>减少请求数量，合并请求</li><li>缓存、CDN</li><li>预加载</li><li>服务端渲染和预渲染（预渲染目的提升首屏性能，预渲染就是在构建阶段，启用无头浏览器，加载项目的路由，并渲染出首屏页面（也可以配置其他路由），然后生成静态页面，输出到指定的目录。prerender-spa-plugin）</li></ul></li><li><p>渲染阶段</p><ul><li>尽量避免重绘与重排</li></ul></li></ol><h3 id="回流与重绘？如何避免？"><a href="#回流与重绘？如何避免？" class="headerlink" title="回流与重绘？如何避免？"></a>回流与重绘？如何避免？</h3><h3 id="浏览器渲染一帧都做了什么？"><a href="#浏览器渲染一帧都做了什么？" class="headerlink" title="浏览器渲染一帧都做了什么？"></a>浏览器渲染一帧都做了什么？</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端八股文-Vue</title>
      <link href="/2023/02/19/qian-duan-ba-gu-wen/qian-duan-ba-gu-wen-vue/"/>
      <url>/2023/02/19/qian-duan-ba-gu-wen/qian-duan-ba-gu-wen-vue/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue双向绑定原理？"><a href="#Vue双向绑定原理？" class="headerlink" title="Vue双向绑定原理？"></a>Vue双向绑定原理？</h3><p>采用Object.defineProperty对数据进行劫持，编译时，对于用到data中数据的地方创建一个watcher来监听数据变化，然后结合发布订阅模式，在数据变动时发布消息给订阅者，从而触发响应我的回调更新视图</p><h3 id="Vuex的使用方法？"><a href="#Vuex的使用方法？" class="headerlink" title="Vuex的使用方法？"></a>Vuex的使用方法？</h3><p>Vuex的数据流是组件中触发action，action提交mutations，mutations修改states。 组件根据 states或getters来渲染页面。</p><p>原理：Vuex首先创建一个数据中心，然后通过发布订阅的模式去通知订阅者进行修改</p><p>Vuex是一个状态管理工具，主要是解决不同组件之间的数据共享问题</p><p>Vuex包含的API：</p><ul><li>state</li><li>getters</li><li>mutations</li><li>actions</li><li>module</li><li>辅助函数：mapState,mapGetters,mapMutations,mapActions</li><li>createStore</li></ul><p><code>state</code>和<code>getters</code>用来保存状态；<br><code>mutations</code> 和 <code>actions</code>用来改变状态；<br>监听状态用的是Vue中的<code>computed</code>属性;<br><code>module</code>是用来组织整个应用的状态管理代码，使状态划分模块，易于管理；<br>辅助函数用来在监听状态时简化代码；<br><code>createStore</code>用来创建状态管理对象。</p><p>注意：Vuex只允许存在一个store对象，当有不同的模块时，需要使用module进行管理，如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'Vuex'</span><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'a'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'b'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">a</span><span class="token operator">:</span> moduleA<span class="token punctuation">,</span>        <span class="token literal-property property">b</span><span class="token operator">:</span> moduleB    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="action与mutation的区别？"><a href="#action与mutation的区别？" class="headerlink" title="action与mutation的区别？"></a>action与mutation的区别？</h3><p>两者都可以用来更新状态</p><p>action提交的是mutation，而不是直接更新状态；可以包含任意的异步操作。如果需要请求接口，可以在action中进行<br>mutation只是简单的变更状态，属于同步操作，只能执行同步代码</p><p>mutation只能执行同步代码，可以直接更新状态。<br>action同样可以更新状态，只是action是通过提交mutation的方式对state进行更新。<code>store.commit(&#39;xx&#39;，value)</code></p><h3 id="为什么mutation同步，action异步"><a href="#为什么mutation同步，action异步" class="headerlink" title="为什么mutation同步，action异步"></a>为什么mutation同步，action异步</h3><ul><li>mutations里同步的意义在于，每一个mutation执行完毕之后，可得到对应的状态，方便Vuex的devtools工具可以跟踪状态的变化</li><li>如果在mutations中写入异步，devtools工具就没法知道状态是什么时候更新的，所以才有了actions</li><li>actions用来专门处理异步，里面触发mutations，就可以很清楚的看到mutation是何时被记录下来的，并且可以立即查看对应的状态，这样异步更新也可以看到更新状态的流程；</li></ul><h3 id="数据持久化存储？"><a href="#数据持久化存储？" class="headerlink" title="数据持久化存储？"></a>数据持久化存储？</h3><blockquote><p>原因：Vuex是基于内存的，状态存在于内存里面的，刷新网页之后就没有了，不会持久化存储</p></blockquote><p><strong>解决方案</strong>：以token为例（用户登录信息）<br><strong>实现思路</strong>：只要Vuex中的数据发生变化，九自动往本地同步一份</p><p><strong>实现步骤</strong></p><ol><li>安装<code>vuex-persistedstate</code>来支持持久化</li><li>在store入口文件中配置<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>createStore<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        moduleA    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugin</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token function">createPersistedstate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token comment">// 存数据的key名，最好语义化，知道是干嘛用的</span>            <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'xxx'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 要进行数据持久化的模块,与modules中的名字一致</span>            <span class="token literal-property property">storage</span><span class="token operator">:</span> window<span class="token punctuation">.</span>sessionStorage <span class="token comment">// 数据存储到哪里，默认是localStorage</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="MVVM与MVC的区别？"><a href="#MVVM与MVC的区别？" class="headerlink" title="MVVM与MVC的区别？"></a>MVVM与MVC的区别？</h3><p>MVVM即Model-View-ViewModel的简写。即模型-视图-视图模型。<br>模型（Model）指的是后端传递的数据。<br>视图(View)指的是所看到的页面。<br>视图模型(ViewModel)是mvvm模式的核心，它是连接view和model的桥梁。</p><p>MVC是Model-View- Controller的简写。即模型-视图-控制器。<br>M和V指的意思和MVVM中的M和V意思一样。<br>C即Controller指的是页面业务逻辑。<br>使用MVC的目的就是将M和V的代码分离。<br>MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下</p><h3 id="Vue组件间通信方式？"><a href="#Vue组件间通信方式？" class="headerlink" title="Vue组件间通信方式？"></a>Vue组件间通信方式？</h3><ol><li><code>props</code>与<code>$emit</code><br>适用于父子组件之间的数据传递<br>父组件中通过属性将数据传递给子组件，在子组件中通过props进行接收</li></ol><ul><li><p>父传子</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 父组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>I'm child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token comment">// &lt;div>&#123;&#123;msg&#125;&#125;&lt;/div></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">''</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子传父<br>在子组件中通过$emit调用父组件的方法，将数据传递给父组件</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'funcName'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token comment">// &lt;child @funcName="getChildData">&lt;/child></span><span class="token keyword">function</span> <span class="token function">getChildData</span><span class="token punctuation">(</span><span class="token parameter">childData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>childData<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>$refs</code><br>父组件能通过$refs直接调用子组件的方法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token operator">&lt;</span>child ref<span class="token operator">=</span><span class="token string">"childRef"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span><span class="token comment">// js</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>childRef<span class="token punctuation">.</span><span class="token function">getChildFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>自定义事件<code>eventBus</code><br>适用于各种层级关系的组件之间进行通信<br><code>eventBus</code>是一个典型的发布订阅模式，当状态改变的时候，改变方通过<code>eventBus</code>发布状态改变事件，相关订阅者则通过该事件获取最新状态进行更新</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过定义一个Vue对象来实现`eventBus`</span><span class="token keyword">const</span> eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>eventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'自定义事件名'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">接收参数</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">// 接收数据一方</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是TestB组件，收到了数据'</span><span class="token punctuation">,</span> 接收参数<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>eventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'自定义事件名'</span><span class="token punctuation">,</span> 传递参数<span class="token punctuation">)</span> <span class="token comment">// 传递数据一方</span>eventBus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 解除绑定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>Vuex</p></li><li><p><code>$parent</code>与<code>$children</code><br>适用于直接父组件或者子组件，注意：$children是非响应式的</p></li><li><p><code>provide</code>与<code>inject</code><br>适用于不同层级组件的通信</p></li></ol><p>在上级组件定义provide</p><p>在下级所有组件都能接收数据inject</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">provide</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">&#125;</span><span class="token comment">// 或</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'hello'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue组件中为什么data是一个函数"><a href="#Vue组件中为什么data是一个函数" class="headerlink" title="Vue组件中为什么data是一个函数"></a>Vue组件中为什么data是一个函数</h3><ol><li><p>Vue的组件是复用的，为了防止data数据的复用，将data定义为函数</p></li><li><p>vue组件中的data数据都应该是相互隔离，互不影响的，组件每复用一次，data数据就应该被复制一次，之后，当某一处复用的地方组件内data数据被改变时，其他复用地方组件的data数据不受影响，就需要通过data函数返回一个对象作为组件的状态。</p></li><li><p>当我们将组件中的data写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的data，拥有自己的作用域，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。</p></li><li><p>当我们组件的date单纯的写成对象形式，这些实例用的是同一个构造函数，由于JavaScript的特性所导致，所有的组件实例共用了一个data，就会造成一个变了全都会变的结果。</p></li></ol><h3 id="computed与watch的区别？"><a href="#computed与watch的区别？" class="headerlink" title="computed与watch的区别？"></a>computed与watch的区别？</h3><ol><li>应用场景不同<br> computed用在根据已有属性或者值计算得到新值的情况<br> watch用在监听已有值的变化</li><li>执行过程不同<br> computed所依赖的值没有发生变化，不会重新进行计算，而是等到访问的时候再判断（有缓存）<br> watch所依赖的值发生变化后就会执行watch的会调</li></ol><h3 id="v-for与v-if同时使用有什么问题？"><a href="#v-for与v-if同时使用有什么问题？" class="headerlink" title="v-for与v-if同时使用有什么问题？"></a>v-for与v-if同时使用有什么问题？</h3><p>两者同时使用，会在每次渲染时候都要遍历列表并判断是否需要渲染，没有必要</p><h3 id="前端路由原理。比较一下history与hash两种路由"><a href="#前端路由原理。比较一下history与hash两种路由" class="headerlink" title="前端路由原理。比较一下history与hash两种路由"></a>前端路由原理。比较一下history与hash两种路由</h3><p>默认hash模式，路径上会有#</p><p>原理：<br>    1. 可以修改url，但不会引起刷新，从而在不刷新的页面的情况下跳转路由。<br>    2. 监听url改变，根据url渲染对应组件</p><p>hash是通过浏览器提供的location API修改url，通过onhashchange方法监听hash改变</p><p>history通过浏览器提供的history.pushState或者history.replacestate修改url，通过popState事件监听url改变</p><h3 id="Vue的虚拟Dom，原理？好处？对比手动操作Dom一定是最优的吗？"><a href="#Vue的虚拟Dom，原理？好处？对比手动操作Dom一定是最优的吗？" class="headerlink" title="Vue的虚拟Dom，原理？好处？对比手动操作Dom一定是最优的吗？"></a>Vue的虚拟Dom，原理？好处？对比手动操作Dom一定是最优的吗？</h3><p>vdom是一个用来描述真是DOM的js数据结构，vdom是树状结构，每个节点对应dom的元素，保存了dom元素的标签名，属性，子节点等信息。<br>node节点的几种类型：TextVNode、ElementVNode、ComponentVNode等</p><p><strong>虚拟DOM的优点</strong></p><ul><li><p>维护视图与状态的关系，在状态改变后，Vue会生成新的虚拟DOM，然后与旧的虚拟DOM进行对比，得到区别，从而进行patch，更新真是DOM，从而保持视图和状态一致</p></li><li><p>避免手工操作DOM，提升项目的可维护性</p></li><li><p>跨平台</p></li></ul><p><strong>虚拟DOM很多时候都不是最优的操作，但它具有普适性，在效率、可维护性之间达平衡</strong></p><p>减少DOM操作提升性能的本质：主要是虚拟dom使修改元素的操作都脱离了文档流，减少重排和重绘，因此提升了性能。</p><h3 id="Vue的keep-alive使用以及原理"><a href="#Vue的keep-alive使用以及原理" class="headerlink" title="Vue的keep-alive使用以及原理"></a>Vue的keep-alive使用以及原理</h3><p>keep-alive是vue的一个内置组件,它将不活动的组件保存在内存中,而非只将其销毁,提供了include(缓存),exclude(不缓存)两个属性,可以有选择的保存组件</p><h3 id="Vue-父子组件生命周期的触发顺序"><a href="#Vue-父子组件生命周期的触发顺序" class="headerlink" title="Vue 父子组件生命周期的触发顺序"></a>Vue 父子组件生命周期的触发顺序</h3><ol><li><p>加载渲染过程<br> 父beforeCreate-》父created-》父beforeMount-》子beforeCreate-》子created-》子beforeMount-》子mounted-》父mounted</p></li><li><p>更新过程<br> 父beforeUpdate-》子beforeUpdate-》子updated-》父updated</p></li><li><p>销毁过程<br> 父beforeDistory-》子beforeDistory-》子distoryed-》父distoryed</p></li></ol><h3 id="Vue-nextTick的实现？"><a href="#Vue-nextTick的实现？" class="headerlink" title="Vue.nextTick的实现？"></a>Vue.nextTick的实现？</h3><h3 id="Vue的diff算法"><a href="#Vue的diff算法" class="headerlink" title="Vue的diff算法"></a>Vue的diff算法</h3><p>作用：用来修改DOM的一小段，不会频繁引起DOM树的重绘</p><p>diff算法将虚拟DOM的某个节点数据改变后生成新的的node节点与旧节点进行比较，并替换为新的节点，具体过程就是调用Patch方法，比较新旧节点，一边比较一边给真实DOM打补丁进行替换</p><h3 id="Vue中key的作用？"><a href="#Vue中key的作用？" class="headerlink" title="Vue中key的作用？"></a>Vue中key的作用？</h3><p>主要是为了高效的更新dom, 其原理是vue在patch过程中通过key更精准判断俩两个虚拟DOM是否是同一个,从而避免频繁更新不同元素,使得整个patch过程更加高效,减少dom操作,提高性能</p><h3 id="Vue2与Vue3的区别？"><a href="#Vue2与Vue3的区别？" class="headerlink" title="Vue2与Vue3的区别？"></a>Vue2与Vue3的区别？</h3><ol><li>响应式原理不同。<ul><li>Vue2主要是通过Object.defineProperty对数据进行监听，通过发布订阅模式，将变动的数据通知给订阅者，从而进行视图更新</li><li>Vue3是通过proxy来实现响应式。通过 reactive() 函数给每⼀个对象都包⼀层 Proxy，通过 Proxy 监听属性的变化，从⽽ 实现对数据的监控。</li></ul></li><li>数据和方法的定义方式<ul><li>Vue2是通过选项式API来定义数据与方法</li><li>Vue3是通过组合式API来定义数据与方法setup()</li></ul></li></ol><h3 id="Vue3-新特性"><a href="#Vue3-新特性" class="headerlink" title="Vue3 新特性"></a>Vue3 新特性</h3><ol><li><p>通过proxy实现响应式</p></li><li><p>组合式API：代码组织更方便了, 逻辑复用更方便了 非常利于维护!!</p></li><li><p>template不再强调只有一个根元素，可以有多个元素</p></li><li><p>ref与reactive函数。Vue3中setup定义的数据默认是非响应式的，可以通过ref与reactive来定义响应式数据</p></li><li><p>toRefs函数：对一个 <strong>响应式对象</strong> 的所有内部属性, 都做响应式处理, 保证展开或者解构出的数据也是响应式的( 一般配合 <code>reactive</code> 使用)</p><ul><li>reactive 的响应式功能是赋值给对象的, 如果给对象解构或者展开, 会让数据丢失响应式的能力</li><li>使用 toRefs 可以保证该对象展开的每个属性都是响应式的</li></ul> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> defaultData <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">formData</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">''</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> formData<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>defaultData<span class="token punctuation">)</span> <span class="token comment">// 解构出的name、age、formData都是响应式数据</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Pinia是什么？好处？"><a href="#Pinia是什么？好处？" class="headerlink" title="Pinia是什么？好处？"></a>Pinia是什么？好处？</h3><p>Pinia是一个状态管理工具，实现不同组件间数据共享</p><p>相关API<br>state、getters、action</p><p>好处：</p><ul><li>与Vuex相比，体积小，轻巧</li><li>更完整的支持TS</li><li>支持多个Store</li><li>没有modules配置，每一个独立的仓库都是defineStore生成出来的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo命令汇总</title>
      <link href="/2023/02/19/hexo/hexo-ming-ling-hui-zong/"/>
      <url>/2023/02/19/hexo/hexo-ming-ling-hui-zong/</url>
      
        <content type="html"><![CDATA[<ol><li><p>_post文件夹下新增文件夹以及文章<br><code>hexo new page --path 前端八股文/前端八股文-Javascript</code><br>此时就在_post下创建了名为“前端八股文”的文件夹，以及此文件夹下新增了一个名为“前端八股文-Javascript”的文章，文章名为page</p></li><li><p><code>hexo new page --path about/me &quot;About me&quot;</code><br>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 <code>Front Matter</code> 中的 <code>title</code> 为 <code>&quot;About me&quot;</code></p></li><li></li></ol><p>hexo 博客文章加密<br><a href="https://zhuanlan.zhihu.com/p/113235573?utm_id=0">https://zhuanlan.zhihu.com/p/113235573?utm_id=0</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端八股文-Javascript</title>
      <link href="/2023/02/19/qian-duan-ba-gu-wen/qian-duan-ba-gu-wen-javascript/"/>
      <url>/2023/02/19/qian-duan-ba-gu-wen/qian-duan-ba-gu-wen-javascript/</url>
      
        <content type="html"><![CDATA[<h3 id="谈谈对原型原型链的理解？"><a href="#谈谈对原型原型链的理解？" class="headerlink" title="谈谈对原型原型链的理解？"></a>谈谈对原型原型链的理解？</h3><p><strong>构造函数：</strong>与普通函数本质上没什么区别，只是使用了new 关键字，一般首字母大写用以区分普通函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">'人类'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span>， <span class="token number">15</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原型对象：</strong>每个函数类型的数据都有一个叫做prototype的属性，这个属性指向一个对象，这个对象就是原型对象</p><p><img src="https://img-blog.csdnimg.cn/57b4ee4d42b744e2b65190e50f5320dc.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81NjUwNTg0NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="原型对象"></p><p>对于原型对象来说，他有个constructor属性，指向它的构造函数<br><img src="https://img-blog.csdnimg.cn/9a73b10ce4dc4f21bf809b82239b0e59.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81NjUwNTg0NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="constructor"></p><p>原型对象可以用来存放实例对象的公有属性和公有方法<br>如上方的species属性与say方法，放在构造函数里，那么每创建一个实例，就会重复创建一次相同的属性和方法，浪费。如果把这些公有属性和公有方法放在原型对象里共享，就会好很多。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">"人类"</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">let</span> per2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>cosnole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span>species<span class="token punctuation">)</span> <span class="token comment">// 人类</span>cosnole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per2<span class="token punctuation">.</span>species<span class="token punctuation">)</span> <span class="token comment">// 人类</span>per1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>per2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原型链：</strong></p><ol><li><p>显示原型：利用prototype属性查找原型，只是这个函数类型数据的属性</p></li><li><p>隐式原型：利用__proto__属性查找原型，这个属性指向当前对象的构造函数的原型对象，这个属性是对象类型数据的属性<br> __proto__、constructor、prototype三者的关系如图<br> <img src="https://img-blog.csdnimg.cn/e5bdab96716f42d9990a54f4e398dbe2.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81NjUwNTg0NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="关系"></p></li><li><p>原型链：如果某个对象查找属性，自己和原型对象上都没有，就继续往原型对象的原型对象上去找，直到找到需要的内容或者是null才会结束，这样顺着__proto__属性，一步步向上查找，所形成的一种链式结构，就是原型链<br><img src="https://img-blog.csdnimg.cn/1ccbdee4f468444dae832fb574ec733d.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81NjUwNTg0NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="原型链图解"></p></li></ol><p><a href="https://blog.csdn.net/weixin_56505845/article/details/119683904">！！原作者博客</a>相当清楚</p><h3 id="Js如何实现继承？"><a href="#Js如何实现继承？" class="headerlink" title="Js如何实现继承？"></a>Js如何实现继承？</h3><p>类是拥有共通属性和行为的实体的抽象，对象是一个具体的实例</p><p><strong>继承：</strong>继承是建立在面向对象基础上的一种代码复用方式，子类通过继承复用父类代码<br>JS继承的最佳实践是“寄生组合式继承”，它用到了原型继承和借用构造函数继承</p><p>实现继承的方法：</p><ul><li>原型继承<ul><li>实现：子类的prototype &#x3D; 父类的实例</li><li>特点：可以继承父类的私有属性和原型属性</li><li>缺点：1、无法向父类的构造函数传参；2、继承的属性都是原型属性，不能是私有属性</li></ul></li><li>借用构造函数<ul><li>实现： 在子类构造函数中使用call&#x2F;apply调用父类构造函数，将父类构造函数指向子类实例</li><li>特点：在子类中可以给父类传参；可以继承父类的私有属性</li><li>缺点：只能继承父类的私有属性，不能继承父类的原型属性</li></ul></li><li>组合继承<ul><li>实现：同时使用原型继承与借用构造函数继承</li><li>特点：可以给父类传参，能同时继承父类的私有属性与原型属性</li><li>缺点：对于父类的私有属性，子类继承时同时存在于私有属性和原型属性中，造成冗余</li></ul></li><li>寄生组合式继承<ul><li>实现：将组合继承中的原型继承去掉，通过另一种方法让子类只继承父类的原型。</li><li>特点：可以向父类传参，能继承父类的私有属性与原型属性，继承后没有荣誉</li></ul></li></ul><h3 id="Js有哪些数据类型？"><a href="#Js有哪些数据类型？" class="headerlink" title="Js有哪些数据类型？"></a>Js有哪些数据类型？</h3><p>js高级程序设计：五种简单类型：undefined、null、number、string、boolean，复杂类型：object<br>实际上，实际上<code>typeof null</code>返回值是null，所以，把null归到object去<br>ES6中又引入了symbol类型<br>所以，数据类型有以下几种：</p><ul><li>number</li><li>string</li><li>boolean</li><li>object</li><li>function</li><li>undefined</li><li>symbol</li></ul><p>undefined只有一个只undefined</p><p>数字类型两个特殊值：NaN（非数字）和Infinity（无穷大）</p><p>object又可以分为：object、array、date、RegExp</p><p>symbol的值是唯一的，用来解决命名冲突；不能与其他值进行运算，不能用for…in遍历</p><p>存储位置：</p><ul><li>基本数据类型：栈内存</li><li>引用数据类型：指针存在栈中，值存在堆中</li></ul><p>堆： 动态分配内存，大小不定，不会自动释放<br>栈：自动分配内存空间，会自动释放</p><h3 id="Js有哪些判断类型的方法？"><a href="#Js有哪些判断类型的方法？" class="headerlink" title="Js有哪些判断类型的方法？"></a>Js有哪些判断类型的方法？</h3><p><strong>1. typeof</strong><br>用来查看字面量或者变量的数据类型，不能具体判断object的类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token comment">// 'number'</span><span class="token keyword">typeof</span> <span class="token string">'1'</span><span class="token comment">// 'string'</span><span class="token keyword">typeof</span> <span class="token boolean">false</span><span class="token comment">// 'boolean'</span><span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 'object'</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// 'object'</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 'object'</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 'function'</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token comment">// 'undefined'</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 'symbol'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. instanceof</strong></p><p>判断一个对象的构造函数是否等于给定的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// true</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span> <span class="token comment">// true</span><span class="token operator">/</span><span class="token number">123</span><span class="token operator">/</span>g <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. constructor</strong></p><p><strong>null与undefined没有constructor属性</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. Object.prototype.toString</strong><br>Object.prototype.toString.call可以用来区分数组、null等引用类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token string">'[object Number]'</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">'[object Number]'</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">'[object String]'</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">'[object Boolean]'</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">'[object Undefined]'</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">'[object Null]'</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">'[object Symbol]'</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token string">'[object Function]'</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">'[object Array]'</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">'[object Object]'</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">'[object Object]'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何判断一个变量是否为数组？"><a href="#如何判断一个变量是否为数组？" class="headerlink" title="如何判断一个变量是否为数组？"></a>如何判断一个变量是否为数组？</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">// 1. ES6 isArray</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token comment">// 2. constructor</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token comment">// true</span><span class="token comment">// 3. instanceof</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="null和undefined的区别？"><a href="#null和undefined的区别？" class="headerlink" title="null和undefined的区别？"></a>null和undefined的区别？</h3><ul><li>null表示引用类型的对象为空，undefined表示未定义</li><li>类型不同：  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="call、apply、bind的区别？"><a href="#call、apply、bind的区别？" class="headerlink" title="call、apply、bind的区别？"></a>call、apply、bind的区别？</h3><p>相同点：都可以用来改变this的指向<br>不同点：<br>    1. call、apply调用时立即执行，bind调用返回新的函数<br>    2. 当需要传递参数时，call直接写多个参数，apply将多个参数写成数组，bind在绑定时候需要固定参数时，也是直接写多个参数。</p><h3 id="防抖和节流的概念？如何实现？"><a href="#防抖和节流的概念？如何实现？" class="headerlink" title="防抖和节流的概念？如何实现？"></a>防抖和节流的概念？如何实现？</h3><p>防抖就是防止抖动，避免事件重复触发<br>节流就是减少流量，将频繁触发的事件减少，并每隔一段时间执行，即，控制事件触发的频率</p><p>防抖：某个函数在某段时间内无论触发多少次，都只执行最后一次，如：搜索<br>实现原理：函数第一次执行，设定一个定时器，在定时器时间内如果函数再次执行，就清除上一个定时器，重新设定，一直到定时器时间到，才会再次触发</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">200</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 透传 this 和参数</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/67195cb158274e5f876e358657119449.png" alt="防抖"></p><p>节流：按时间节奏来，达到某个结果是执行。如：scroll或者drag<br>    某个操作，希望上一次的完成后再进行下一次，或者希望隔一段时间触发一次</p><p>实现原理：函数第一次</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>            timer <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/14fcee30f3d74ef4841739a448e5f3ca.png" alt="防抖"></p><h3 id="深拷贝与浅拷贝？如何实现？"><a href="#深拷贝与浅拷贝？如何实现？" class="headerlink" title="深拷贝与浅拷贝？如何实现？"></a>深拷贝与浅拷贝？如何实现？</h3><p>深拷贝时，会拷贝对象的所有属性，如果这些属性也是对象，会继续拷贝这些对象的属性</p><p>浅拷贝，只会拷贝对象的第一层属性，如果这些属性还是对象，则不会对这些对象进行拷贝，而是直接复制对象的引用，这意味着，对于浅拷贝后的对象，如果原对象的属性值发生了变化，浅拷贝后的对象的属性值也会跟着发生变化。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 浅拷贝</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'章三'</span><span class="token punctuation">,</span>   <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token comment">// 方法一：定义一个函数，遍历对象，将对象的每一个属性复制到另一个对象中</span> <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> targetObj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">shallowCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token comment">// 方法二：直接赋值</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现深拷贝</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'章三'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>    <span class="token literal-property property">car</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"奔驰"</span><span class="token punctuation">,</span> <span class="token string">"宝马"</span><span class="token punctuation">,</span> <span class="token string">"特斯拉"</span><span class="token punctuation">,</span> <span class="token string">"奥拓"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">dog</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 方法一：</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> targetObj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span>  item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token function">deepCopy</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>item instance Object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token function">deepCopy</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token comment">//方法二：</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Sam'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token literal-property property">child</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Ann'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="var、let、const的区别？"><a href="#var、let、const的区别？" class="headerlink" title="var、let、const的区别？"></a>var、let、const的区别？</h3><p>var、let可以声明变量，const可以声明常量<br>var、let声明的变量值可以被改变，const声明的引用类型的值可以改变</p><p>var是函数作用域，let和const是块级作用域</p><p>var有变量提升，可以在声明之前调用，不会报错</p><p>const一旦声明必须赋值</p><p>暂时性死区：只要块级作用域内存在let命令，它所声明的变量就绑定这个区域，不再受外界的影响</p><p>块级作用域：指一个代码块区域，指变量只作用于当前代码块</p><h3 id="ES-next新特性有哪些？"><a href="#ES-next新特性有哪些？" class="headerlink" title="ES next新特性有哪些？"></a>ES next新特性有哪些？</h3><ol><li>块级作用域（let、const）</li><li>箭头函数</li><li>Class</li><li>模版字符串</li><li>解构</li><li>Proxy</li><li>Promise</li></ol><h3 id="箭头函数与普通函数的区别？"><a href="#箭头函数与普通函数的区别？" class="headerlink" title="箭头函数与普通函数的区别？"></a>箭头函数与普通函数的区别？</h3><p>写法不同，this指向不同<br>箭头函数不能创建构造函数</p><h3 id="使用new创建对象的过程是什么样的？"><a href="#使用new创建对象的过程是什么样的？" class="headerlink" title="使用new创建对象的过程是什么样的？"></a>使用new创建对象的过程是什么样的？</h3><ol><li><p>创建一个空对象</p></li><li><p>将对象的__proto__属性值指向其构造函数的prototype</p></li><li><p>执行构造函数中的代码</p></li><li><p>返回对象</p></li></ol><h3 id="this的指向问题？"><a href="#this的指向问题？" class="headerlink" title="this的指向问题？"></a>this的指向问题？</h3><p>谁调用，就指向谁</p><p>箭头函数的this指向它声明时所在函数的this，如果是全局声明，就指向window</p><h3 id="手写bind方法？"><a href="#手写bind方法？" class="headerlink" title="手写bind方法？"></a>手写bind方法？</h3><h3 id="闭包？应用场景？缺点？如何避免？"><a href="#闭包？应用场景？缺点？如何避免？" class="headerlink" title="闭包？应用场景？缺点？如何避免？"></a>闭包？应用场景？缺点？如何避免？</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> inner<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果没有将outer的返回值赋值给b，那么内部函数就不会被引用，就不会形成闭包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>什么是闭包？函数和函数内部能访问到的变量的总和，就是一个闭包。</li><li>如何生成闭包? 函数嵌套 + 内部函数被引用。</li><li>闭包作用？隐藏变量，避免放在全局有被篡改的风险。</li><li>使用闭包的注意事项？不用的时候解除引用，避免不必要的内存占用。</li><li>闭包的缺点：使用时候不注意的话，容易产生内存泄漏。</li></ol><h3 id="Js事件循环？"><a href="#Js事件循环？" class="headerlink" title="Js事件循环？"></a>Js事件循环？</h3><p>js是单线程的，默认一个情况下只能进行一个任务</p><p><strong>阻塞代码与非阻塞代码</strong></p><ul><li><p>阻塞代码：同步代码，会严格按照单线程，从上到下从左到右执行</p></li><li><p>非阻塞代码：异步执行的代码，js在工作时依然会按照顺序依次执行，当遇到需要异步操作的代码时，会先将其挂起，继续执行同步代码，等到同步代码执行完成再执行被挂起的代码</p></li></ul><p>事件循环机制：所有的同步任务都是在主线程上执行，形成一个执行栈，在主线程之外，还有一个任务队列。在代码执行过程中先执行同步代码，遇到宏任务就先存放在宏任务队列中，遇到为任务就先存放在为任务队列中，等到同步任务执行完成，再依次清空微任务队列与宏任务队列</p><p><img src="https://img-blog.csdnimg.cn/img_convert/346aa917c1d37864445c8c58f86e5830.png" alt="事件循环机制"></p><p><img src="https://img-blog.csdnimg.cn/e9a98a94b83c41b791e074dcc8ec67ae.png" alt="异步代码执行顺序"></p><p><strong>执行顺序</strong></p><ol><li>执行顺序： 微任务 &gt; dom渲染 &gt; 宏任务</li><li>微任务比宏任务执行早的原因：<br>微任务：<br>ES 语法标准之内，JS 引擎来统一处理。即，不用浏览器有任何关于，即可一次性处理完，更快更及时。<br>宏任务：<br>ES 语法没有，JS 引擎不处理，浏览器（或 nodejs）干预处理。</li></ol><h3 id="对于promise的理解？"><a href="#对于promise的理解？" class="headerlink" title="对于promise的理解？"></a>对于promise的理解？</h3><p>promise目的：异步编程解决回调地狱，让程序开发者编写的异步代码具有更好的可读性。</p><p>有三种状态：<br>    - pendding-等待<br>    - resolved-完成<br>    - rejected-失败</p><p>promise对象的方法：<br>    - then<br>        接收两个参数，一个成功，一个失败<br>    - catch<br>        与then方法的reject回调用法相同，如果任务处于rejected状态，直接执行catch；如果任务处于pendding状态，则注册catch回调，等到状态变成rejected时再执行<br>    - all<br>        - Promise.all方法用于多个异步任务执行，当所有的任务都正常完成时（resolve），再做后面处理的场景<br>        - <code>Promise.all([promise, promise2])</code>当promise1与promise2都为resolve时才会resolve，只要有一个为reject，则为reject<br>        - 对应的，<code>Promise.all</code>返回的promise对象的then方法，第一个回调的参数也是一个数组<br>        <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolve'</span><span class="token punctuation">,</span> result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行结果</span>resolve <span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>    - race<br>        - Promise.race用于多个异步任务执行，当其中有一个任务完成或失败时，就执行后续的处理<br>        - Promise.race接收一个数组作为参数，返回一个新的promise</p><h3 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h3><p>promise是通过then方法注册回调方式</p><p>async&#x2F;await是以同步代码的形式写异步逻辑</p><p>必须成对使用</p><ul><li>如果方法中有await，方法需要加async修饰符。await后面跟一个promise。await表达式结果是promise resolve的值。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行结果</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>async方法返回一个promise。其resolve的值就是async方法中return的值。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'test'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">task1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行结果</span>test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果await后面返回的promise reject掉，需要用try catch语句捕获这个reject</li></ul><h3 id="手写promise"><a href="#手写promise" class="headerlink" title="手写promise"></a>手写promise</h3><ul><li>定义三个状态</li><li>创建构造函数 function Promise(excutor){}</li><li>构造函数内部定义当前状态state&#x2F;resolve值&#x2F;reject的reson，定成功回调onFullfilled与失败回调onRejected</li><li>声明一个resolve函数，如果当前状态是pendding，就将state设置成fullFilled，给value赋值，遍历onFullFilled回调</li><li>声明一个reject函数，如果当前状态是pendding，就将state设置成rejected，给reson赋值，遍历onRejected回调</li><li>将resolve与reject两个方法传入excutor，<code>excutor(recolve, reject)</code></li></ul><h3 id="CommonJs与ESM的区别？"><a href="#CommonJs与ESM的区别？" class="headerlink" title="CommonJs与ESM的区别？"></a>CommonJs与ESM的区别？</h3><ul><li><p>commonjs：</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">,</span>    b<span class="token punctuation">&#125;</span><span class="token comment">// 引入</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xx.js'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>esm:</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">,</span>    b<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'xx.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="柯里化是什么？有什么用？如何实现？"><a href="#柯里化是什么？有什么用？如何实现？" class="headerlink" title="柯里化是什么？有什么用？如何实现？"></a>柯里化是什么？有什么用？如何实现？</h3><p>是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><h3 id="关于JS垃圾回收？"><a href="#关于JS垃圾回收？" class="headerlink" title="关于JS垃圾回收？"></a>关于JS垃圾回收？</h3><p>js中的内存管理是自动的，每当我们创建函数、对象、数组的时候会自动的分配相应的内存空间;</p><ul><li>对象不再被引用的时候是垃圾;</li><li>对象不能从根上访问到时也是垃圾;</li></ul><h3 id="实现一个发布订阅？"><a href="#实现一个发布订阅？" class="headerlink" title="实现一个发布订阅？"></a>实现一个发布订阅？</h3><h3 id="实现数组拍平？"><a href="#实现数组拍平？" class="headerlink" title="实现数组拍平？"></a>实现数组拍平？</h3><h3 id="实现数组去重？"><a href="#实现数组去重？" class="headerlink" title="实现数组去重？"></a>实现数组去重？</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome调试小技巧</title>
      <link href="/2022/08/17/chrome-diao-shi-xiao-ji-qiao/"/>
      <url>/2022/08/17/chrome-diao-shi-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="一键重新发起请求"><a href="#一键重新发起请求" class="headerlink" title="一键重新发起请求"></a>一键重新发起请求</h2><p>与后台联调或者排查Bug时，听到比较多的话大概就是：<strong>你再重新请求一次</strong>。可能有人会刷新一下页面，当然也会有人这样做：</p><ol><li><p>打开控制台，选中<code>network</code></p></li><li><p>选择要重新发送的请求</p></li><li><p>右键选择<code>Replay XHR</code><br><img src="https://gitee.com/syy1101/image/raw/master/1.png" alt="小技巧"></p></li></ol><p>快捷地请求需要再次请求的接口，又不用刷新页面，简直爽翻</p><h2 id="在控制台快速发起请求"><a href="#在控制台快速发起请求" class="headerlink" title="在控制台快速发起请求"></a>在控制台快速发起请求</h2><p>有时候针对同样的请求，需要修改入参重新发起请求，有人这样做：</p><ol><li>选中network</li><li>选择要修改入参的的接口</li><li>选择<code>Copy as fetch</code></li><li>在控制台粘贴代码，修改入参回车<br><img src="https://gitee.com/syy1101/image/raw/master/2.png" alt="小技巧"><br><img src="https://gitee.com/syy1101/image/raw/master/3.png" alt="小技巧"></li></ol><h2 id="复制Javascript变量"><a href="#复制Javascript变量" class="headerlink" title="复制Javascript变量"></a>复制Javascript变量</h2><p>假如你的代码输出一个比较复杂的对象，你又想复制下来发送给别人，怎么办？<code>JSON.stringify()</code>再复制吗？<br>有人用copy函数实现：<br><img src="https://gitee.com/syy1101/image/raw/master/4.png" alt="小技巧"><br>直接回车，粘贴到编辑器中长这样：<br><img src="https://gitee.com/syy1101/image/raw/master/5.png" alt="小技巧"></p><h2 id="一键展开所有的DOM元素"><a href="#一键展开所有的DOM元素" class="headerlink" title="一键展开所有的DOM元素"></a>一键展开所有的DOM元素</h2><p>调试元素是&#x3D;时，层级比较深的情况下，有一种更方便的方式去展开进行调试</p><blockquote><p>按住opt键，然后点击要展开的最外层元素</p></blockquote><p>展开后效果：<br><img src="https://gitee.com/syy1101/image/raw/master/6.png" alt="小技巧"></p><h2 id="“-”与“-”选择器"><a href="#“-”与“-”选择器" class="headerlink" title="“$”与“$$”选择器"></a>“$”与“$$”选择器</h2><p> 大家估计都控制台用过document.querySelector与document.querySelectAll选择当前页面的元素，不过，这一大串着实长了点，完全可以用$ 与 $$ 替代<br> <img src="https://gitee.com/syy1101/image/raw/master/7.png" alt="小技巧"></p><p> 所以，大家更愿意用长串还是俩符号呢</p><h2 id="Add-conditional-breakpoint条件断点"><a href="#Add-conditional-breakpoint条件断点" class="headerlink" title="Add conditional breakpoint条件断点"></a>Add conditional breakpoint条件断点</h2><p> 例如下面的代码，希望动物名称是“dog”时触发断点，可以怎么去操作？<br> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> animal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"cat"</span><span class="token punctuation">,</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"dog"</span><span class="token punctuation">,</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"pink"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"monkey"</span><span class="token punctuation">,</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"green"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>animal<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> item<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>如果没有条件断点，那么在调试大量数据的情况下，是不是要点N次debugger<br><img src="https://gitee.com/syy1101/image/raw/master/8.png" alt="小技巧"></p><h2 id="使用-i直接在控制台安装npm包"><a href="#使用-i直接在控制台安装npm包" class="headerlink" title="使用$i直接在控制台安装npm包"></a>使用$i直接在控制台安装npm包</h2><p>有时候使用如dayjs或者lodash的某个API，但是你又不想去官网查，咋整？<br>有这么一个插件<code>Console Importer</code>，可以用来在控制台直接安装npm包</p><ol><li>安装插件</li><li>$i(‘名称’)安装npm包</li></ol><p>我还木有这么操作过，感兴趣的可以试试😂</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode实用小插件</title>
      <link href="/2022/08/04/vscode-shi-yong-xiao-cha-jian/"/>
      <url>/2022/08/04/vscode-shi-yong-xiao-cha-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、苹果代码截图插件-CodeSnap"><a href="#一、苹果代码截图插件-CodeSnap" class="headerlink" title="一、苹果代码截图插件 CodeSnap"></a>一、苹果代码截图插件 CodeSnap</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接在插件市场搜索 <code>CodeSnap</code>，重启<code>vscode</code>即可生效</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1、快捷键<code>Ctrl + Shift + p</code>打开控制面板，输入<code>CodeSnap</code><br>2、选中你要截取的代码，就可以愉快地截图啦<br>3、点击图标进行保存<br><img src="https://s1.328888.xyz/2022/08/04/jMY66.png" alt="示例"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>helloWorld</title>
      <link href="/2022/07/20/helloworld/"/>
      <url>/2022/07/20/helloworld/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="210e4d537956c8a17a9688405d4df3685038b0ee40df6efde0323e10f3fa97d7">fbbe9bde7786c624a82629bf9f450e1bfa4fa0f27b693dd435a0dfe5b10862981dbecc93dc0ffee8409446005993ad63ea0f98cf93f111d13b3a13a41df5f22ff456e2c2b028c9edcc85e8f96fcf7a9c7f3065f0bf95760d76ba192c540a6f0a2be7988ee5a76d7d48a376054db7ecf7f565a18d121af856b7aa9c4c077eb838</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">暗号，快输入暗号！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
